import { PrePaidServerDataVolume } from './PrePaidServerDataVolume';
import { PrePaidServerExtendParam } from './PrePaidServerExtendParam';
import { PrePaidServerNic } from './PrePaidServerNic';
import { PrePaidServerPublicip } from './PrePaidServerPublicip';
import { PrePaidServerRootVolume } from './PrePaidServerRootVolume';
import { PrePaidServerSchedulerHints } from './PrePaidServerSchedulerHints';
import { PrePaidServerSecurityGroup } from './PrePaidServerSecurityGroup';
import { PrePaidServerTag } from './PrePaidServerTag';
export declare class PrePaidServer {
    private 'auto_terminate_time'?;
    imageRef: string;
    flavorRef: string;
    name: string;
    private 'user_data'?;
    adminPass?: string;
    private 'key_name'?;
    vpcid: string;
    nics: Array<PrePaidServerNic>;
    publicip?: PrePaidServerPublicip;
    count?: number;
    isAutoRename?: boolean;
    private 'root_volume';
    private 'data_volumes'?;
    private 'security_groups'?;
    private 'availability_zone'?;
    extendparam?: PrePaidServerExtendParam;
    metadata?: {
        [key: string]: string;
    };
    private 'os:scheduler_hints'?;
    tags?: Array<string>;
    private 'server_tags'?;
    description?: string;
    constructor(imageRef?: any, flavorRef?: any, name?: any, vpcid?: any, nics?: any, rootVolume?: any);
    withAutoTerminateTime(autoTerminateTime: string): PrePaidServer;
    set autoTerminateTime(autoTerminateTime: string | undefined);
    get autoTerminateTime(): string | undefined;
    withImageRef(imageRef: string): PrePaidServer;
    withFlavorRef(flavorRef: string): PrePaidServer;
    withName(name: string): PrePaidServer;
    withUserData(userData: string): PrePaidServer;
    set userData(userData: string | undefined);
    get userData(): string | undefined;
    withAdminPass(adminPass: string): PrePaidServer;
    withKeyName(keyName: string): PrePaidServer;
    set keyName(keyName: string | undefined);
    get keyName(): string | undefined;
    withVpcid(vpcid: string): PrePaidServer;
    withNics(nics: Array<PrePaidServerNic>): PrePaidServer;
    withPublicip(publicip: PrePaidServerPublicip): PrePaidServer;
    withCount(count: number): PrePaidServer;
    withIsAutoRename(isAutoRename: boolean): PrePaidServer;
    withRootVolume(rootVolume: PrePaidServerRootVolume): PrePaidServer;
    set rootVolume(rootVolume: PrePaidServerRootVolume | undefined);
    get rootVolume(): PrePaidServerRootVolume | undefined;
    withDataVolumes(dataVolumes: Array<PrePaidServerDataVolume>): PrePaidServer;
    set dataVolumes(dataVolumes: Array<PrePaidServerDataVolume> | undefined);
    get dataVolumes(): Array<PrePaidServerDataVolume> | undefined;
    withSecurityGroups(securityGroups: Array<PrePaidServerSecurityGroup>): PrePaidServer;
    set securityGroups(securityGroups: Array<PrePaidServerSecurityGroup> | undefined);
    get securityGroups(): Array<PrePaidServerSecurityGroup> | undefined;
    withAvailabilityZone(availabilityZone: string): PrePaidServer;
    set availabilityZone(availabilityZone: string | undefined);
    get availabilityZone(): string | undefined;
    withExtendparam(extendparam: PrePaidServerExtendParam): PrePaidServer;
    withMetadata(metadata: {
        [key: string]: string;
    }): PrePaidServer;
    withOsSchedulerHints(osSchedulerHints: PrePaidServerSchedulerHints): PrePaidServer;
    set osSchedulerHints(osSchedulerHints: PrePaidServerSchedulerHints | undefined);
    get osSchedulerHints(): PrePaidServerSchedulerHints | undefined;
    withTags(tags: Array<string>): PrePaidServer;
    withServerTags(serverTags: Array<PrePaidServerTag>): PrePaidServer;
    set serverTags(serverTags: Array<PrePaidServerTag> | undefined);
    get serverTags(): Array<PrePaidServerTag> | undefined;
    withDescription(description: string): PrePaidServer;
}
