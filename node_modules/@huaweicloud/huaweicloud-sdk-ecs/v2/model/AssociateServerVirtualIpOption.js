"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssociateServerVirtualIpOption = void 0;
var AssociateServerVirtualIpOption = /** @class */ (function () {
    function AssociateServerVirtualIpOption(subnetId, ipAddress) {
        this['subnet_id'] = subnetId;
        this['ip_address'] = ipAddress;
    }
    AssociateServerVirtualIpOption.prototype.withSubnetId = function (subnetId) {
        this['subnet_id'] = subnetId;
        return this;
    };
    Object.defineProperty(AssociateServerVirtualIpOption.prototype, "subnetId", {
        get: function () {
            return this['subnet_id'];
        },
        set: function (subnetId) {
            this['subnet_id'] = subnetId;
        },
        enumerable: false,
        configurable: true
    });
    AssociateServerVirtualIpOption.prototype.withIpAddress = function (ipAddress) {
        this['ip_address'] = ipAddress;
        return this;
    };
    Object.defineProperty(AssociateServerVirtualIpOption.prototype, "ipAddress", {
        get: function () {
            return this['ip_address'];
        },
        set: function (ipAddress) {
            this['ip_address'] = ipAddress;
        },
        enumerable: false,
        configurable: true
    });
    AssociateServerVirtualIpOption.prototype.withReverseBinding = function (reverseBinding) {
        this['reverse_binding'] = reverseBinding;
        return this;
    };
    Object.defineProperty(AssociateServerVirtualIpOption.prototype, "reverseBinding", {
        get: function () {
            return this['reverse_binding'];
        },
        set: function (reverseBinding) {
            this['reverse_binding'] = reverseBinding;
        },
        enumerable: false,
        configurable: true
    });
    return AssociateServerVirtualIpOption;
}());
exports.AssociateServerVirtualIpOption = AssociateServerVirtualIpOption;
