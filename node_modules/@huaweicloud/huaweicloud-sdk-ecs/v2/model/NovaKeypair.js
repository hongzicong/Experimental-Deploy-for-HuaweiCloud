"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NovaKeypair = void 0;
var NovaKeypair = /** @class */ (function () {
    function NovaKeypair(fingerprint, name, publicKey, privateKey, userId) {
        this['fingerprint'] = fingerprint;
        this['name'] = name;
        this['public_key'] = publicKey;
        this['private_key'] = privateKey;
        this['user_id'] = userId;
    }
    NovaKeypair.prototype.withFingerprint = function (fingerprint) {
        this['fingerprint'] = fingerprint;
        return this;
    };
    NovaKeypair.prototype.withName = function (name) {
        this['name'] = name;
        return this;
    };
    NovaKeypair.prototype.withPublicKey = function (publicKey) {
        this['public_key'] = publicKey;
        return this;
    };
    Object.defineProperty(NovaKeypair.prototype, "publicKey", {
        get: function () {
            return this['public_key'];
        },
        set: function (publicKey) {
            this['public_key'] = publicKey;
        },
        enumerable: false,
        configurable: true
    });
    NovaKeypair.prototype.withPrivateKey = function (privateKey) {
        this['private_key'] = privateKey;
        return this;
    };
    Object.defineProperty(NovaKeypair.prototype, "privateKey", {
        get: function () {
            return this['private_key'];
        },
        set: function (privateKey) {
            this['private_key'] = privateKey;
        },
        enumerable: false,
        configurable: true
    });
    NovaKeypair.prototype.withUserId = function (userId) {
        this['user_id'] = userId;
        return this;
    };
    Object.defineProperty(NovaKeypair.prototype, "userId", {
        get: function () {
            return this['user_id'];
        },
        set: function (userId) {
            this['user_id'] = userId;
        },
        enumerable: false,
        configurable: true
    });
    NovaKeypair.prototype.withType = function (type) {
        this['type'] = type;
        return this;
    };
    return NovaKeypair;
}());
exports.NovaKeypair = NovaKeypair;
