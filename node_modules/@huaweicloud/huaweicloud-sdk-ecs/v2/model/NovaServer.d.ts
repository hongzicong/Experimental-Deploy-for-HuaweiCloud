import { NovaLink } from './NovaLink';
import { NovaNetwork } from './NovaNetwork';
import { NovaServerFault } from './NovaServerFault';
import { NovaServerFlavor } from './NovaServerFlavor';
import { NovaServerImage } from './NovaServerImage';
import { NovaServerSchedulerHints } from './NovaServerSchedulerHints';
import { NovaServerSecurityGroup } from './NovaServerSecurityGroup';
import { NovaServerVolume } from './NovaServerVolume';
export declare class NovaServer {
    name: string;
    id: string;
    status: NovaServerStatusEnum;
    created: string;
    updated: string;
    flavor: NovaServerFlavor;
    image: NovaServerImage;
    private 'tenant_id';
    private 'key_name';
    private 'user_id';
    metadata: {
        [key: string]: string;
    };
    hostId: string;
    addresses: {
        [key: string]: Array<NovaNetwork>;
    };
    private 'security_groups';
    links: Array<NovaLink>;
    private 'OS-DCF:diskConfig';
    private 'OS-EXT-AZ:availability_zone';
    private 'OS-EXT-SRV-ATTR:host';
    private 'OS-EXT-SRV-ATTR:hypervisor_hostname';
    private 'OS-EXT-SRV-ATTR:instance_name';
    private 'OS-EXT-STS:power_state';
    private 'OS-EXT-STS:task_state';
    private 'OS-EXT-STS:vm_state';
    private 'OS-SRV-USG:launched_at';
    private 'OS-SRV-USG:terminated_at';
    private 'os-extended-volumes:volumes_attached';
    fault?: NovaServerFault;
    description?: string;
    private 'host_status';
    private 'OS-EXT-SRV-ATTR:hostname'?;
    private 'OS-EXT-SRV-ATTR:reservation_id'?;
    private 'OS-EXT-SRV-ATTR:launch_index'?;
    private 'OS-EXT-SRV-ATTR:kernel_id'?;
    private 'OS-EXT-SRV-ATTR:ramdisk_id'?;
    private 'OS-EXT-SRV-ATTR:root_device_name'?;
    private 'OS-EXT-SRV-ATTR:user_data'?;
    tags: Array<string>;
    locked?: boolean;
    accessIPv4: string;
    accessIPv6: string;
    private 'config_drive';
    progress: number;
    private 'os:scheduler_hints'?;
    constructor(name?: any, id?: any, status?: any, created?: any, updated?: any, flavor?: any, image?: any, tenantId?: any, keyName?: any, userId?: any, metadata?: any, hostId?: any, addresses?: any, securityGroups?: any, links?: any, oSDCFDiskConfig?: any, oSEXTAZAvailabilityZone?: any, oSEXTSRVATTRHost?: any, oSEXTSRVATTRHypervisorHostname?: any, oSEXTSRVATTRInstanceName?: any, oSEXTSTSPowerState?: any, oSEXTSTSTaskState?: any, oSEXTSTSVmState?: any, oSSRVUSGLaunchedAt?: any, oSSRVUSGTerminatedAt?: any, osExtendedVolumesVolumesAttached?: any, hostStatus?: any, tags?: any, accessIPv4?: any, accessIPv6?: any, configDrive?: any, progress?: any);
    withName(name: string): NovaServer;
    withId(id: string): NovaServer;
    withStatus(status: NovaServerStatusEnum): NovaServer;
    withCreated(created: string): NovaServer;
    withUpdated(updated: string): NovaServer;
    withFlavor(flavor: NovaServerFlavor): NovaServer;
    withImage(image: NovaServerImage): NovaServer;
    withTenantId(tenantId: string): NovaServer;
    set tenantId(tenantId: string | undefined);
    get tenantId(): string | undefined;
    withKeyName(keyName: string): NovaServer;
    set keyName(keyName: string | undefined);
    get keyName(): string | undefined;
    withUserId(userId: string): NovaServer;
    set userId(userId: string | undefined);
    get userId(): string | undefined;
    withMetadata(metadata: {
        [key: string]: string;
    }): NovaServer;
    withHostId(hostId: string): NovaServer;
    withAddresses(addresses: {
        [key: string]: Array<NovaNetwork>;
    }): NovaServer;
    withSecurityGroups(securityGroups: Array<NovaServerSecurityGroup>): NovaServer;
    set securityGroups(securityGroups: Array<NovaServerSecurityGroup> | undefined);
    get securityGroups(): Array<NovaServerSecurityGroup> | undefined;
    withLinks(links: Array<NovaLink>): NovaServer;
    withOSDCFDiskConfig(oSDCFDiskConfig: NovaServerOSDCFDiskConfigEnum): NovaServer;
    set oSDCFDiskConfig(oSDCFDiskConfig: NovaServerOSDCFDiskConfigEnum | undefined);
    get oSDCFDiskConfig(): NovaServerOSDCFDiskConfigEnum | undefined;
    withOSEXTAZAvailabilityZone(oSEXTAZAvailabilityZone: string): NovaServer;
    set oSEXTAZAvailabilityZone(oSEXTAZAvailabilityZone: string | undefined);
    get oSEXTAZAvailabilityZone(): string | undefined;
    withOSEXTSRVATTRHost(oSEXTSRVATTRHost: string): NovaServer;
    set oSEXTSRVATTRHost(oSEXTSRVATTRHost: string | undefined);
    get oSEXTSRVATTRHost(): string | undefined;
    withOSEXTSRVATTRHypervisorHostname(oSEXTSRVATTRHypervisorHostname: string): NovaServer;
    set oSEXTSRVATTRHypervisorHostname(oSEXTSRVATTRHypervisorHostname: string | undefined);
    get oSEXTSRVATTRHypervisorHostname(): string | undefined;
    withOSEXTSRVATTRInstanceName(oSEXTSRVATTRInstanceName: string): NovaServer;
    set oSEXTSRVATTRInstanceName(oSEXTSRVATTRInstanceName: string | undefined);
    get oSEXTSRVATTRInstanceName(): string | undefined;
    withOSEXTSTSPowerState(oSEXTSTSPowerState: number): NovaServer;
    set oSEXTSTSPowerState(oSEXTSTSPowerState: number | undefined);
    get oSEXTSTSPowerState(): number | undefined;
    withOSEXTSTSTaskState(oSEXTSTSTaskState: NovaServerOSEXTSTSTaskStateEnum): NovaServer;
    set oSEXTSTSTaskState(oSEXTSTSTaskState: NovaServerOSEXTSTSTaskStateEnum | undefined);
    get oSEXTSTSTaskState(): NovaServerOSEXTSTSTaskStateEnum | undefined;
    withOSEXTSTSVmState(oSEXTSTSVmState: NovaServerOSEXTSTSVmStateEnum): NovaServer;
    set oSEXTSTSVmState(oSEXTSTSVmState: NovaServerOSEXTSTSVmStateEnum | undefined);
    get oSEXTSTSVmState(): NovaServerOSEXTSTSVmStateEnum | undefined;
    withOSSRVUSGLaunchedAt(oSSRVUSGLaunchedAt: string): NovaServer;
    set oSSRVUSGLaunchedAt(oSSRVUSGLaunchedAt: string | undefined);
    get oSSRVUSGLaunchedAt(): string | undefined;
    withOSSRVUSGTerminatedAt(oSSRVUSGTerminatedAt: string): NovaServer;
    set oSSRVUSGTerminatedAt(oSSRVUSGTerminatedAt: string | undefined);
    get oSSRVUSGTerminatedAt(): string | undefined;
    withOsExtendedVolumesVolumesAttached(osExtendedVolumesVolumesAttached: Array<NovaServerVolume>): NovaServer;
    set osExtendedVolumesVolumesAttached(osExtendedVolumesVolumesAttached: Array<NovaServerVolume> | undefined);
    get osExtendedVolumesVolumesAttached(): Array<NovaServerVolume> | undefined;
    withFault(fault: NovaServerFault): NovaServer;
    withDescription(description: string): NovaServer;
    withHostStatus(hostStatus: NovaServerHostStatusEnum): NovaServer;
    set hostStatus(hostStatus: NovaServerHostStatusEnum | undefined);
    get hostStatus(): NovaServerHostStatusEnum | undefined;
    withOSEXTSRVATTRHostname(oSEXTSRVATTRHostname: string): NovaServer;
    set oSEXTSRVATTRHostname(oSEXTSRVATTRHostname: string | undefined);
    get oSEXTSRVATTRHostname(): string | undefined;
    withOSEXTSRVATTRReservationId(oSEXTSRVATTRReservationId: string): NovaServer;
    set oSEXTSRVATTRReservationId(oSEXTSRVATTRReservationId: string | undefined);
    get oSEXTSRVATTRReservationId(): string | undefined;
    withOSEXTSRVATTRLaunchIndex(oSEXTSRVATTRLaunchIndex: number): NovaServer;
    set oSEXTSRVATTRLaunchIndex(oSEXTSRVATTRLaunchIndex: number | undefined);
    get oSEXTSRVATTRLaunchIndex(): number | undefined;
    withOSEXTSRVATTRKernelId(oSEXTSRVATTRKernelId: string): NovaServer;
    set oSEXTSRVATTRKernelId(oSEXTSRVATTRKernelId: string | undefined);
    get oSEXTSRVATTRKernelId(): string | undefined;
    withOSEXTSRVATTRRamdiskId(oSEXTSRVATTRRamdiskId: string): NovaServer;
    set oSEXTSRVATTRRamdiskId(oSEXTSRVATTRRamdiskId: string | undefined);
    get oSEXTSRVATTRRamdiskId(): string | undefined;
    withOSEXTSRVATTRRootDeviceName(oSEXTSRVATTRRootDeviceName: string): NovaServer;
    set oSEXTSRVATTRRootDeviceName(oSEXTSRVATTRRootDeviceName: string | undefined);
    get oSEXTSRVATTRRootDeviceName(): string | undefined;
    withOSEXTSRVATTRUserData(oSEXTSRVATTRUserData: string): NovaServer;
    set oSEXTSRVATTRUserData(oSEXTSRVATTRUserData: string | undefined);
    get oSEXTSRVATTRUserData(): string | undefined;
    withTags(tags: Array<string>): NovaServer;
    withLocked(locked: boolean): NovaServer;
    withAccessIPv4(accessIPv4: string): NovaServer;
    withAccessIPv6(accessIPv6: string): NovaServer;
    withConfigDrive(configDrive: string): NovaServer;
    set configDrive(configDrive: string | undefined);
    get configDrive(): string | undefined;
    withProgress(progress: number): NovaServer;
    withOsSchedulerHints(osSchedulerHints: NovaServerSchedulerHints): NovaServer;
    set osSchedulerHints(osSchedulerHints: NovaServerSchedulerHints | undefined);
    get osSchedulerHints(): NovaServerSchedulerHints | undefined;
}
/**
    * @export
    * @enum {string}
    */
export declare enum NovaServerStatusEnum {
    ACTIVE = "ACTIVE",
    BUILD = " BUILD",
    DELETED = "DELETED",
    ERROR = "ERROR",
    HARD_REBOOT = "HARD_REBOOT",
    MIGRATING = "MIGRATING",
    REBOOT = "REBOOT",
    RESIZE = "RESIZE",
    REVERT_RESIZE = "REVERT_RESIZE",
    SHELVED = "SHELVED",
    SHELVED_OFFLOADED = "SHELVED_OFFLOADED",
    SHUTOFF = "SHUTOFF",
    UNKNOWN = "UNKNOWN",
    VERIFY_RESIZE = "VERIFY_RESIZE"
}
/**
    * @export
    * @enum {string}
    */
export declare enum NovaServerOSDCFDiskConfigEnum {
    AUTO = "AUTO",
    MANUAL = "MANUAL"
}
/**
    * @export
    * @enum {string}
    */
export declare enum NovaServerOSEXTSTSTaskStateEnum {
    SHOUTOFF = "SHOUTOFF",
    RESIZE = " RESIZE",
    REBUILD = " REBUILD",
    VERIFY_RESIZE = " VERIFY_RESIZE",
    REVERT_RESIZE = " REVERT_RESIZE",
    PAUSED = " PAUSED",
    MIGRATING = " MIGRATING",
    SUSPENDED = " SUSPENDED",
    RESCUE = " RESCUE",
    ERROR = " ERROR",
    DELETED = " DELETED",
    SOFT_DELETED = "SOFT_DELETED",
    SHELVED = "SHELVED",
    SHELVED_OFFLOADED = "SHELVED_OFFLOADED"
}
/**
    * @export
    * @enum {string}
    */
export declare enum NovaServerOSEXTSTSVmStateEnum {
    ACTIVE = "ACTIVE",
    BUILDING = "BUILDING",
    STOPPED = "STOPPED",
    RESIZED = "RESIZED",
    PAUSED = "PAUSED",
    SUSPENDED = "SUSPENDED",
    RESCUED = "RESCUED",
    ERROR = "ERROR",
    DELETED = "DELETED",
    SOFT_DELETED = "SOFT_DELETED",
    SHELVED = "SHELVED",
    SHELVED_OFFLOADED = "SHELVED_OFFLOADED"
}
/**
    * @export
    * @enum {string}
    */
export declare enum NovaServerHostStatusEnum {
    UP = "UP",
    UNKNOWN = "UNKNOWN",
    DOWN = "DOWN",
    MAINTENANCE = "MAINTENANCE"
}
