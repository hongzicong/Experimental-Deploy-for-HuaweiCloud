import { ProjectFlavorLimit } from './ProjectFlavorLimit';
export declare class ServerLimits {
    maxImageMeta: number;
    maxPersonality: number;
    maxPersonalitySize: number;
    maxSecurityGroupRules: number;
    maxSecurityGroups: number;
    maxServerGroupMembers: number;
    maxServerGroups: number;
    maxServerMeta: number;
    maxTotalCores: number;
    maxTotalFloatingIps: number;
    maxTotalInstances: number;
    maxTotalKeypairs: number;
    maxTotalRAMSize: number;
    totalCoresUsed: number;
    totalFloatingIpsUsed: number;
    totalInstancesUsed: number;
    totalRAMUsed: number;
    totalSecurityGroupsUsed: number;
    totalServerGroupsUsed: number;
    maxTotalSpotInstances?: number;
    maxTotalSpotCores?: number;
    maxTotalSpotRAMSize?: number;
    totalSpotInstancesUsed?: number;
    totalSpotCoresUsed?: number;
    totalSpotRAMUsed?: number;
    private 'limit_by_flavor'?;
    constructor(maxImageMeta?: any, maxPersonality?: any, maxPersonalitySize?: any, maxSecurityGroupRules?: any, maxSecurityGroups?: any, maxServerGroupMembers?: any, maxServerGroups?: any, maxServerMeta?: any, maxTotalCores?: any, maxTotalFloatingIps?: any, maxTotalInstances?: any, maxTotalKeypairs?: any, maxTotalRAMSize?: any, totalCoresUsed?: any, totalFloatingIpsUsed?: any, totalInstancesUsed?: any, totalRAMUsed?: any, totalSecurityGroupsUsed?: any, totalServerGroupsUsed?: any);
    withMaxImageMeta(maxImageMeta: number): ServerLimits;
    withMaxPersonality(maxPersonality: number): ServerLimits;
    withMaxPersonalitySize(maxPersonalitySize: number): ServerLimits;
    withMaxSecurityGroupRules(maxSecurityGroupRules: number): ServerLimits;
    withMaxSecurityGroups(maxSecurityGroups: number): ServerLimits;
    withMaxServerGroupMembers(maxServerGroupMembers: number): ServerLimits;
    withMaxServerGroups(maxServerGroups: number): ServerLimits;
    withMaxServerMeta(maxServerMeta: number): ServerLimits;
    withMaxTotalCores(maxTotalCores: number): ServerLimits;
    withMaxTotalFloatingIps(maxTotalFloatingIps: number): ServerLimits;
    withMaxTotalInstances(maxTotalInstances: number): ServerLimits;
    withMaxTotalKeypairs(maxTotalKeypairs: number): ServerLimits;
    withMaxTotalRAMSize(maxTotalRAMSize: number): ServerLimits;
    withTotalCoresUsed(totalCoresUsed: number): ServerLimits;
    withTotalFloatingIpsUsed(totalFloatingIpsUsed: number): ServerLimits;
    withTotalInstancesUsed(totalInstancesUsed: number): ServerLimits;
    withTotalRAMUsed(totalRAMUsed: number): ServerLimits;
    withTotalSecurityGroupsUsed(totalSecurityGroupsUsed: number): ServerLimits;
    withTotalServerGroupsUsed(totalServerGroupsUsed: number): ServerLimits;
    withMaxTotalSpotInstances(maxTotalSpotInstances: number): ServerLimits;
    withMaxTotalSpotCores(maxTotalSpotCores: number): ServerLimits;
    withMaxTotalSpotRAMSize(maxTotalSpotRAMSize: number): ServerLimits;
    withTotalSpotInstancesUsed(totalSpotInstancesUsed: number): ServerLimits;
    withTotalSpotCoresUsed(totalSpotCoresUsed: number): ServerLimits;
    withTotalSpotRAMUsed(totalSpotRAMUsed: number): ServerLimits;
    withLimitByFlavor(limitByFlavor: Array<ProjectFlavorLimit>): ServerLimits;
    set limitByFlavor(limitByFlavor: Array<ProjectFlavorLimit> | undefined);
    get limitByFlavor(): Array<ProjectFlavorLimit> | undefined;
}
