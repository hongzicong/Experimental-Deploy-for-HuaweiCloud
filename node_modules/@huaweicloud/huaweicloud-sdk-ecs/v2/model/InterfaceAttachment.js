"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceAttachment = void 0;
var InterfaceAttachment = /** @class */ (function () {
    function InterfaceAttachment() {
    }
    InterfaceAttachment.prototype.withFixedIps = function (fixedIps) {
        this['fixed_ips'] = fixedIps;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "fixedIps", {
        get: function () {
            return this['fixed_ips'];
        },
        set: function (fixedIps) {
            this['fixed_ips'] = fixedIps;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withMacAddr = function (macAddr) {
        this['mac_addr'] = macAddr;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "macAddr", {
        get: function () {
            return this['mac_addr'];
        },
        set: function (macAddr) {
            this['mac_addr'] = macAddr;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withNetId = function (netId) {
        this['net_id'] = netId;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "netId", {
        get: function () {
            return this['net_id'];
        },
        set: function (netId) {
            this['net_id'] = netId;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withPortId = function (portId) {
        this['port_id'] = portId;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "portId", {
        get: function () {
            return this['port_id'];
        },
        set: function (portId) {
            this['port_id'] = portId;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withPortState = function (portState) {
        this['port_state'] = portState;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "portState", {
        get: function () {
            return this['port_state'];
        },
        set: function (portState) {
            this['port_state'] = portState;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withDeleteOnTermination = function (deleteOnTermination) {
        this['delete_on_termination'] = deleteOnTermination;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "deleteOnTermination", {
        get: function () {
            return this['delete_on_termination'];
        },
        set: function (deleteOnTermination) {
            this['delete_on_termination'] = deleteOnTermination;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withDriverMode = function (driverMode) {
        this['driver_mode'] = driverMode;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "driverMode", {
        get: function () {
            return this['driver_mode'];
        },
        set: function (driverMode) {
            this['driver_mode'] = driverMode;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withMinRate = function (minRate) {
        this['min_rate'] = minRate;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "minRate", {
        get: function () {
            return this['min_rate'];
        },
        set: function (minRate) {
            this['min_rate'] = minRate;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withMultiqueueNum = function (multiqueueNum) {
        this['multiqueue_num'] = multiqueueNum;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "multiqueueNum", {
        get: function () {
            return this['multiqueue_num'];
        },
        set: function (multiqueueNum) {
            this['multiqueue_num'] = multiqueueNum;
        },
        enumerable: false,
        configurable: true
    });
    InterfaceAttachment.prototype.withPciAddress = function (pciAddress) {
        this['pci_address'] = pciAddress;
        return this;
    };
    Object.defineProperty(InterfaceAttachment.prototype, "pciAddress", {
        get: function () {
            return this['pci_address'];
        },
        set: function (pciAddress) {
            this['pci_address'] = pciAddress;
        },
        enumerable: false,
        configurable: true
    });
    return InterfaceAttachment;
}());
exports.InterfaceAttachment = InterfaceAttachment;
