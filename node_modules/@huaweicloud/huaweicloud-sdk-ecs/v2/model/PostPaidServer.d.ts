import { PostPaidServerDataVolume } from './PostPaidServerDataVolume';
import { PostPaidServerExtendParam } from './PostPaidServerExtendParam';
import { PostPaidServerNic } from './PostPaidServerNic';
import { PostPaidServerPublicip } from './PostPaidServerPublicip';
import { PostPaidServerRootVolume } from './PostPaidServerRootVolume';
import { PostPaidServerSchedulerHints } from './PostPaidServerSchedulerHints';
import { PostPaidServerSecurityGroup } from './PostPaidServerSecurityGroup';
import { PostPaidServerTag } from './PostPaidServerTag';
export declare class PostPaidServer {
    private 'auto_terminate_time'?;
    adminPass?: string;
    private 'availability_zone'?;
    count?: number;
    private 'data_volumes'?;
    extendparam?: PostPaidServerExtendParam;
    flavorRef: string;
    imageRef: string;
    isAutoRename?: boolean;
    private 'key_name'?;
    metadata?: {
        [key: string]: string;
    };
    name: string;
    nics: Array<PostPaidServerNic>;
    private 'os:scheduler_hints'?;
    publicip?: PostPaidServerPublicip;
    private 'root_volume';
    private 'security_groups'?;
    private 'server_tags'?;
    tags?: Array<string>;
    private 'user_data'?;
    vpcid: string;
    description?: string;
    constructor(flavorRef?: any, imageRef?: any, name?: any, nics?: any, rootVolume?: any, vpcid?: any);
    withAutoTerminateTime(autoTerminateTime: string): PostPaidServer;
    set autoTerminateTime(autoTerminateTime: string | undefined);
    get autoTerminateTime(): string | undefined;
    withAdminPass(adminPass: string): PostPaidServer;
    withAvailabilityZone(availabilityZone: string): PostPaidServer;
    set availabilityZone(availabilityZone: string | undefined);
    get availabilityZone(): string | undefined;
    withCount(count: number): PostPaidServer;
    withDataVolumes(dataVolumes: Array<PostPaidServerDataVolume>): PostPaidServer;
    set dataVolumes(dataVolumes: Array<PostPaidServerDataVolume> | undefined);
    get dataVolumes(): Array<PostPaidServerDataVolume> | undefined;
    withExtendparam(extendparam: PostPaidServerExtendParam): PostPaidServer;
    withFlavorRef(flavorRef: string): PostPaidServer;
    withImageRef(imageRef: string): PostPaidServer;
    withIsAutoRename(isAutoRename: boolean): PostPaidServer;
    withKeyName(keyName: string): PostPaidServer;
    set keyName(keyName: string | undefined);
    get keyName(): string | undefined;
    withMetadata(metadata: {
        [key: string]: string;
    }): PostPaidServer;
    withName(name: string): PostPaidServer;
    withNics(nics: Array<PostPaidServerNic>): PostPaidServer;
    withOsSchedulerHints(osSchedulerHints: PostPaidServerSchedulerHints): PostPaidServer;
    set osSchedulerHints(osSchedulerHints: PostPaidServerSchedulerHints | undefined);
    get osSchedulerHints(): PostPaidServerSchedulerHints | undefined;
    withPublicip(publicip: PostPaidServerPublicip): PostPaidServer;
    withRootVolume(rootVolume: PostPaidServerRootVolume): PostPaidServer;
    set rootVolume(rootVolume: PostPaidServerRootVolume | undefined);
    get rootVolume(): PostPaidServerRootVolume | undefined;
    withSecurityGroups(securityGroups: Array<PostPaidServerSecurityGroup>): PostPaidServer;
    set securityGroups(securityGroups: Array<PostPaidServerSecurityGroup> | undefined);
    get securityGroups(): Array<PostPaidServerSecurityGroup> | undefined;
    withServerTags(serverTags: Array<PostPaidServerTag>): PostPaidServer;
    set serverTags(serverTags: Array<PostPaidServerTag> | undefined);
    get serverTags(): Array<PostPaidServerTag> | undefined;
    withTags(tags: Array<string>): PostPaidServer;
    withUserData(userData: string): PostPaidServer;
    set userData(userData: string | undefined);
    get userData(): string | undefined;
    withVpcid(vpcid: string): PostPaidServer;
    withDescription(description: string): PostPaidServer;
}
