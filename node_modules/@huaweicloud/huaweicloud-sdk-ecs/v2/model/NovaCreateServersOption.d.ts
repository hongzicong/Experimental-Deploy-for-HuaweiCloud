import { NovaServerBlockDeviceMapping } from './NovaServerBlockDeviceMapping';
import { NovaServerNetwork } from './NovaServerNetwork';
import { NovaServerSecurityGroup } from './NovaServerSecurityGroup';
export declare class NovaCreateServersOption {
    private 'auto_terminate_time'?;
    imageRef?: string;
    flavorRef: string;
    name: string;
    metadata?: {
        [key: string]: string;
    };
    adminPass?: string;
    private 'block_device_mapping_v2'?;
    private 'config_drive'?;
    private 'security_groups'?;
    networks: Array<NovaServerNetwork>;
    private 'key_name'?;
    private 'user_data'?;
    private 'availability_zone'?;
    private 'return_reservation_id'?;
    private 'min_count'?;
    private 'max_count'?;
    private 'OS-DCF:diskConfig'?;
    description?: string;
    constructor(flavorRef?: any, name?: any, networks?: any);
    withAutoTerminateTime(autoTerminateTime: string): NovaCreateServersOption;
    set autoTerminateTime(autoTerminateTime: string | undefined);
    get autoTerminateTime(): string | undefined;
    withImageRef(imageRef: string): NovaCreateServersOption;
    withFlavorRef(flavorRef: string): NovaCreateServersOption;
    withName(name: string): NovaCreateServersOption;
    withMetadata(metadata: {
        [key: string]: string;
    }): NovaCreateServersOption;
    withAdminPass(adminPass: string): NovaCreateServersOption;
    withBlockDeviceMappingV2(blockDeviceMappingV2: Array<NovaServerBlockDeviceMapping>): NovaCreateServersOption;
    set blockDeviceMappingV2(blockDeviceMappingV2: Array<NovaServerBlockDeviceMapping> | undefined);
    get blockDeviceMappingV2(): Array<NovaServerBlockDeviceMapping> | undefined;
    withConfigDrive(configDrive: string): NovaCreateServersOption;
    set configDrive(configDrive: string | undefined);
    get configDrive(): string | undefined;
    withSecurityGroups(securityGroups: Array<NovaServerSecurityGroup>): NovaCreateServersOption;
    set securityGroups(securityGroups: Array<NovaServerSecurityGroup> | undefined);
    get securityGroups(): Array<NovaServerSecurityGroup> | undefined;
    withNetworks(networks: Array<NovaServerNetwork>): NovaCreateServersOption;
    withKeyName(keyName: string): NovaCreateServersOption;
    set keyName(keyName: string | undefined);
    get keyName(): string | undefined;
    withUserData(userData: string): NovaCreateServersOption;
    set userData(userData: string | undefined);
    get userData(): string | undefined;
    withAvailabilityZone(availabilityZone: string): NovaCreateServersOption;
    set availabilityZone(availabilityZone: string | undefined);
    get availabilityZone(): string | undefined;
    withReturnReservationId(returnReservationId: boolean): NovaCreateServersOption;
    set returnReservationId(returnReservationId: boolean | undefined);
    get returnReservationId(): boolean | undefined;
    withMinCount(minCount: number): NovaCreateServersOption;
    set minCount(minCount: number | undefined);
    get minCount(): number | undefined;
    withMaxCount(maxCount: number): NovaCreateServersOption;
    set maxCount(maxCount: number | undefined);
    get maxCount(): number | undefined;
    withOSDCFDiskConfig(oSDCFDiskConfig: NovaCreateServersOptionOSDCFDiskConfigEnum): NovaCreateServersOption;
    set oSDCFDiskConfig(oSDCFDiskConfig: NovaCreateServersOptionOSDCFDiskConfigEnum | undefined);
    get oSDCFDiskConfig(): NovaCreateServersOptionOSDCFDiskConfigEnum | undefined;
    withDescription(description: string): NovaCreateServersOption;
}
/**
    * @export
    * @enum {string}
    */
export declare enum NovaCreateServersOptionOSDCFDiskConfigEnum {
    AUTO = "AUTO",
    MANUAL = "MANUAL"
}
