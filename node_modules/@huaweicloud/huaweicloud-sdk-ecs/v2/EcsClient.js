"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequiredError = exports.ParamCreater = exports.EcsClient = void 0;
var ClientBuilder_1 = require("@huaweicloud/huaweicloud-sdk-core/ClientBuilder");
var AddServerGroupMemberRequest_1 = require("./model/AddServerGroupMemberRequest");
var AssociateServerVirtualIpRequest_1 = require("./model/AssociateServerVirtualIpRequest");
var AttachServerVolumeRequest_1 = require("./model/AttachServerVolumeRequest");
var BatchAddServerNicsRequest_1 = require("./model/BatchAddServerNicsRequest");
var BatchAttachSharableVolumesRequest_1 = require("./model/BatchAttachSharableVolumesRequest");
var BatchCreateServerTagsRequest_1 = require("./model/BatchCreateServerTagsRequest");
var BatchDeleteServerNicsRequest_1 = require("./model/BatchDeleteServerNicsRequest");
var BatchDeleteServerTagsRequest_1 = require("./model/BatchDeleteServerTagsRequest");
var BatchRebootServersRequest_1 = require("./model/BatchRebootServersRequest");
var BatchResetServersPasswordRequest_1 = require("./model/BatchResetServersPasswordRequest");
var BatchStartServersRequest_1 = require("./model/BatchStartServersRequest");
var BatchStopServersRequest_1 = require("./model/BatchStopServersRequest");
var BatchUpdateServersNameRequest_1 = require("./model/BatchUpdateServersNameRequest");
var ChangeServerOsWithCloudInitRequest_1 = require("./model/ChangeServerOsWithCloudInitRequest");
var ChangeServerOsWithoutCloudInitRequest_1 = require("./model/ChangeServerOsWithoutCloudInitRequest");
var CreatePostPaidServersRequest_1 = require("./model/CreatePostPaidServersRequest");
var CreateServerGroupRequest_1 = require("./model/CreateServerGroupRequest");
var CreateServersRequest_1 = require("./model/CreateServersRequest");
var DeleteServerGroupMemberRequest_1 = require("./model/DeleteServerGroupMemberRequest");
var DeleteServerGroupRequest_1 = require("./model/DeleteServerGroupRequest");
var DeleteServerMetadataRequest_1 = require("./model/DeleteServerMetadataRequest");
var DeleteServerPasswordRequest_1 = require("./model/DeleteServerPasswordRequest");
var DeleteServersRequest_1 = require("./model/DeleteServersRequest");
var DetachServerVolumeRequest_1 = require("./model/DetachServerVolumeRequest");
var DisassociateServerVirtualIpRequest_1 = require("./model/DisassociateServerVirtualIpRequest");
var ListFlavorsRequest_1 = require("./model/ListFlavorsRequest");
var ListResizeFlavorsRequest_1 = require("./model/ListResizeFlavorsRequest");
var ListServerBlockDevicesRequest_1 = require("./model/ListServerBlockDevicesRequest");
var ListServerGroupsRequest_1 = require("./model/ListServerGroupsRequest");
var ListServerInterfacesRequest_1 = require("./model/ListServerInterfacesRequest");
var ListServersDetailsRequest_1 = require("./model/ListServersDetailsRequest");
var MigrateServerRequest_1 = require("./model/MigrateServerRequest");
var NovaAssociateSecurityGroupRequest_1 = require("./model/NovaAssociateSecurityGroupRequest");
var NovaCreateKeypairRequest_1 = require("./model/NovaCreateKeypairRequest");
var NovaCreateServersRequest_1 = require("./model/NovaCreateServersRequest");
var NovaDeleteKeypairRequest_1 = require("./model/NovaDeleteKeypairRequest");
var NovaDeleteServerRequest_1 = require("./model/NovaDeleteServerRequest");
var NovaDisassociateSecurityGroupRequest_1 = require("./model/NovaDisassociateSecurityGroupRequest");
var NovaListKeypairsRequest_1 = require("./model/NovaListKeypairsRequest");
var NovaListServerSecurityGroupsRequest_1 = require("./model/NovaListServerSecurityGroupsRequest");
var NovaListServersDetailsRequest_1 = require("./model/NovaListServersDetailsRequest");
var NovaShowKeypairRequest_1 = require("./model/NovaShowKeypairRequest");
var NovaShowServerRequest_1 = require("./model/NovaShowServerRequest");
var RegisterServerAutoRecoveryRequest_1 = require("./model/RegisterServerAutoRecoveryRequest");
var ReinstallServerWithCloudInitRequest_1 = require("./model/ReinstallServerWithCloudInitRequest");
var ReinstallServerWithoutCloudInitRequest_1 = require("./model/ReinstallServerWithoutCloudInitRequest");
var ResetServerPasswordRequest_1 = require("./model/ResetServerPasswordRequest");
var ResizePostPaidServerRequest_1 = require("./model/ResizePostPaidServerRequest");
var ResizeServerRequest_1 = require("./model/ResizeServerRequest");
var ShowJobRequest_1 = require("./model/ShowJobRequest");
var ShowResetPasswordFlagRequest_1 = require("./model/ShowResetPasswordFlagRequest");
var ShowServerAutoRecoveryRequest_1 = require("./model/ShowServerAutoRecoveryRequest");
var ShowServerBlockDeviceRequest_1 = require("./model/ShowServerBlockDeviceRequest");
var ShowServerGroupRequest_1 = require("./model/ShowServerGroupRequest");
var ShowServerPasswordRequest_1 = require("./model/ShowServerPasswordRequest");
var ShowServerRemoteConsoleRequest_1 = require("./model/ShowServerRemoteConsoleRequest");
var ShowServerRequest_1 = require("./model/ShowServerRequest");
var ShowServerTagsRequest_1 = require("./model/ShowServerTagsRequest");
var UpdateServerAutoTerminateTimeRequest_1 = require("./model/UpdateServerAutoTerminateTimeRequest");
var UpdateServerMetadataRequest_1 = require("./model/UpdateServerMetadataRequest");
var UpdateServerRequest_1 = require("./model/UpdateServerRequest");
var EcsClient = /** @class */ (function () {
    function EcsClient(client) {
        this.hcClient = client;
    }
    EcsClient.newBuilder = function () {
        return new ClientBuilder_1.ClientBuilder(newClient);
    };
    EcsClient.prototype.getPath = function () {
        return __dirname;
    };
    /**
     * 将云服务器加入云服务器组。添加成功后，如果该云服务器组是反亲和性策略的，则该云服务器与云服务器组中的其他成员尽量分散地创建在不同主机上。如果该云服务器时故障域类型的，则该云服务器会拥有故障域属性。
     * @summary 云服务器组添加成员
     * @param {string} serverGroupId 云服务器组ID。
     * @param {AddServerGroupMemberRequestBody} addServerGroupMemberRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.addServerGroupMember = function (addServerGroupMemberRequest) {
        var options = (0, exports.ParamCreater)().addServerGroupMember(addServerGroupMemberRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 虚拟IP地址用于为网卡提供第二个IP地址，同时支持与多个弹性云服务器的网卡绑定，从而实现多个弹性云服务器之间的高可用性。  该接口用于给云服务器网卡配置虚拟IP地址：  - 当指定的IP地址是一个不存在的虚拟IP地址时，系统会创建该虚拟IP，并绑定至对应网卡。  - 当指定的IP地址是一个已经创建好的私有IP时，系统会将指定的网卡和虚拟IP绑定。如果该IP的device_owner为空，则仅支持VPC内二三层通信；如果该IP的device_owner为neutron:VIP_PORT，则支持VPC内二三层通信、VPC之间对等连接访问，以及弹性公网IP、VPN、云专线等Internet接入。
     * @summary 云服务器网卡配置虚拟IP地址
     * @param {string} nicId 云服务器网卡ID。
     * @param {AssociateServerVirtualIpRequestBody} associateServerVirtualIpRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.associateServerVirtualIp = function (associateServerVirtualIpRequest) {
        var options = (0, exports.ParamCreater)().associateServerVirtualIp(associateServerVirtualIpRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 把磁盘挂载到弹性云服务器上。
     * @summary 弹性云服务器挂载磁盘
     * @param {string} serverId 云服务器ID。
     * @param {AttachServerVolumeRequestBody} attachServerVolumeRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.attachServerVolume = function (attachServerVolumeRequest) {
        var options = (0, exports.ParamCreater)().attachServerVolume(attachServerVolumeRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 给云服务器添加一张或多张网卡。
     * @summary 批量添加云服务器网卡
     * @param {string} serverId 云服务器ID。
     * @param {BatchAddServerNicsRequestBody} batchAddServerNicsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchAddServerNics = function (batchAddServerNicsRequest) {
        var options = (0, exports.ParamCreater)().batchAddServerNics(batchAddServerNicsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 将指定的共享磁盘一次性挂载到多个弹性云服务器，实现批量挂载。
     * @summary 批量挂载指定共享盘
     * @param {string} volumeId 共享磁盘ID。
     * @param {BatchAttachSharableVolumesRequestBody} batchAttachSharableVolumesRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchAttachSharableVolumes = function (batchAttachSharableVolumesRequest) {
        var options = (0, exports.ParamCreater)().batchAttachSharableVolumes(batchAttachSharableVolumesRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * - 为指定云服务器批量添加标签。  - 标签管理服务TMS使用该接口批量管理云服务器的标签。
     * @summary 批量添加云服务器标签
     * @param {string} serverId 云服务器ID。
     * @param {BatchCreateServerTagsRequestBody} batchCreateServerTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchCreateServerTags = function (batchCreateServerTagsRequest) {
        var options = (0, exports.ParamCreater)().batchCreateServerTags(batchCreateServerTagsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 卸载并删除云服务器中的一张或多张网卡。
     * @summary 批量删除云服务器网卡
     * @param {string} serverId 云服务器ID。
     * @param {BatchDeleteServerNicsRequestBody} batchDeleteServerNicsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchDeleteServerNics = function (batchDeleteServerNicsRequest) {
        var options = (0, exports.ParamCreater)().batchDeleteServerNics(batchDeleteServerNicsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * - 为指定云服务器批量删除标签。  - 标签管理服务TMS使用该接口批量管理云服务器的标签。
     * @summary 批量删除云服务器标签
     * @param {string} serverId 云服务器ID。
     * @param {BatchDeleteServerTagsRequestBody} batchDeleteServerTagsRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchDeleteServerTags = function (batchDeleteServerTagsRequest) {
        var options = (0, exports.ParamCreater)().batchDeleteServerTags(batchDeleteServerTagsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据给定的云服务器ID列表，批量重启云服务器，一次最多可以重启1000台。
     * @summary 批量重启云服务器
     * @param {BatchRebootServersRequestBody} batchRebootServersRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchRebootServers = function (batchRebootServersRequest) {
        var options = (0, exports.ParamCreater)().batchRebootServers(batchRebootServersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 批量重置弹性云服务器管理帐号（root用户或Administrator用户）的密码。
     * @summary 批量重置弹性云服务器密码
     * @param {BatchResetServersPasswordRequestBody} batchResetServersPasswordRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchResetServersPassword = function (batchResetServersPasswordRequest) {
        var options = (0, exports.ParamCreater)().batchResetServersPassword(batchResetServersPasswordRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据给定的云服务器ID列表，批量启动云服务器，一次最多可以启动1000台。
     * @summary 批量启动云服务器
     * @param {BatchStartServersRequestBody} batchStartServersRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchStartServers = function (batchStartServersRequest) {
        var options = (0, exports.ParamCreater)().batchStartServers(batchStartServersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据给定的云服务器ID列表，批量关闭云服务器，一次最多可以关闭1000台。
     * @summary 批量关闭云服务器
     * @param {BatchStopServersRequestBody} batchStopServersRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchStopServers = function (batchStopServersRequest) {
        var options = (0, exports.ParamCreater)().batchStopServers(batchStopServersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 批量修改弹性云服务器信息。 当前仅支持批量修改云服务器名称，一次最多可以修改1000台。
     * @summary 批量修改弹性云服务器
     * @param {BatchUpdateServersNameRequestBody} batchUpdateServersNameRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.batchUpdateServersName = function (batchUpdateServersNameRequest) {
        var options = (0, exports.ParamCreater)().batchUpdateServersName(batchUpdateServersNameRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 切换弹性云服务器操作系统。支持弹性云服务器数据盘不变的情况下，使用新镜像重装系统盘。  调用该接口后，系统将卸载系统盘，然后使用新镜像重新创建系统盘，并挂载至弹性云服务器，实现切换操作系统功能。
     * @summary 切换弹性云服务器操作系统(安装Cloud init)
     * @param {string} serverId 云服务器ID。
     * @param {ChangeServerOsWithCloudInitRequestBody} changeServerOsWithCloudInitRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.changeServerOsWithCloudInit = function (changeServerOsWithCloudInitRequest) {
        var options = (0, exports.ParamCreater)().changeServerOsWithCloudInit(changeServerOsWithCloudInitRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 切换弹性云服务器操作系统。  该接口支持未安装Cloud-init或Cloudbase-init的镜像使用。
     * @summary 切换弹性云服务器操作系统(未安装Cloud init)
     * @param {string} serverId 云服务器ID。
     * @param {ChangeServerOsWithoutCloudInitRequestBody} changeServerOsWithoutCloudInitRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.changeServerOsWithoutCloudInit = function (changeServerOsWithoutCloudInitRequest) {
        var options = (0, exports.ParamCreater)().changeServerOsWithoutCloudInit(changeServerOsWithoutCloudInitRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建一台或多台[按需付费](https://support.huaweicloud.com/productdesc-ecs/ecs_01_0065.html)方式的云服务器。  弹性云服务器的登录鉴权方式包括两种：密钥对、密码。为安全起见，推荐使用密钥对方式。  - 密钥对 密钥对指使用密钥对作为弹性云服务器的鉴权方式。 接口调用方法：使用key_name字段，指定弹性云服务器登录时使用的密钥文件。  - 密码 密码指使用设置初始密码方式作为弹性云服务器的鉴权方式，此时，您可以通过用户名密码方式登录弹性云服务器，Linux操作系统时为root用户的初始密码，Windows操作系统时为Administrator用户的初始密码。  接口调用方法：使用adminPass字段，指定管理员帐号的初始登录密码。对于镜像已安装Cloud-init的Linux云服务器，如果需要使用密文密码，可以使用user_data字段进行密码注入。  > 对于安装Cloud-init镜像的Linux云服务器云主机，若指定user_data字段，则adminPass字段无效。
     * @summary 创建云服务器(按需)
     * @param {CreatePostPaidServersRequestBody} createPostPaidServersRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.createPostPaidServers = function (createPostPaidServersRequest) {
        var options = (0, exports.ParamCreater)().createPostPaidServers(createPostPaidServersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建弹性云服务器组。  与原生的创建云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
     * @summary 创建云服务器组
     * @param {CreateServerGroupRequestBody} createServerGroupRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.createServerGroup = function (createServerGroupRequest) {
        var options = (0, exports.ParamCreater)().createServerGroup(createServerGroupRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建一台或多台云服务器。  指该接口兼容《弹性云服务器接口参考》创建云服务器v1的功能，同时合入新功能，支持创建[包年/包月](https://support.huaweicloud.com/productdesc-ecs/ecs_01_0065.html)的弹性云服务器。  弹性云服务器的登录鉴权方式包括两种：密钥对、密码。为安全起见，推荐使用密钥对方式。  - 密钥对  指使用密钥对作为弹性云服务器的鉴权方式。  接口调用方法：使用key_name字段，指定弹性云服务器登录时使用的密钥文件。  - 密码  指使用设置初始密码方式作为弹性云服务器的鉴权方式，此时，您可以通过用户名密码方式登录弹性云服务器，Linux操作系统时为root用户的初始密码，Windows操作系统时为Administrator用户的初始密码。  接口调用方法：使用adminPass字段，指定管理员帐号的初始登录密码。对于镜像已安装Cloud-init的Linux云服务器，如果需要使用密文密码，可以使用user_data字段进行密码注入。  > 对于安装Cloud-init镜像的Linux云服务器云主机，若指定user_data字段，则adminPass字段无效。  购买操作示例： - [使用API购买ECS过程中常见问题及处理方法](https://support.huaweicloud.com/api-ecs/ecs_04_0007.html) - [获取Token并检验Token的有效期 ](https://support.huaweicloud.com/api-ecs/ecs_04_0008.html)
     * @summary 创建云服务器
     * @param {CreateServersRequestBody} createServersRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.createServers = function (createServersRequest) {
        var options = (0, exports.ParamCreater)().createServers(createServersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除云服务器组。  与原生的删除云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
     * @summary 删除云服务器组
     * @param {string} serverGroupId 弹性云服务器组UUID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.deleteServerGroup = function (deleteServerGroupRequest) {
        var options = (0, exports.ParamCreater)().deleteServerGroup(deleteServerGroupRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 将弹性云服务器移出云服务器组。移出后，该云服务器与云服务器组中的成员不再遵从反亲和策略。
     * @summary 云服务器组删除成员
     * @param {string} serverGroupId 云服务器组ID。
     * @param {DeleteServerGroupMemberRequestBody} deleteServerGroupMemberRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.deleteServerGroupMember = function (deleteServerGroupMemberRequest) {
        var options = (0, exports.ParamCreater)().deleteServerGroupMember(deleteServerGroupMemberRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除云服务器指定元数据。
     * @summary 删除云服务器指定元数据
     * @param {string} key 待删除的云服务器metadata键值
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.deleteServerMetadata = function (deleteServerMetadataRequest) {
        var options = (0, exports.ParamCreater)().deleteServerMetadata(deleteServerMetadataRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 清除Windows云服务器初始安装时系统生成的密码记录。清除密码后，不影响云服务器密码登录功能，但不能再使用获取密码功能来查询该云服务器密码。
     * @summary 云服务器清除密码(企业项目)
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.deleteServerPassword = function (deleteServerPasswordRequest) {
        var options = (0, exports.ParamCreater)().deleteServerPassword(deleteServerPasswordRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据指定的云服务器ID列表，删除云服务器。  系统支持删除单台云服务器和批量删除多台云服务器操作，批量删除云服务器时，一次最多可以删除1000台。
     * @summary 删除云服务器
     * @param {DeleteServersRequestBody} deleteServersRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.deleteServers = function (deleteServersRequest) {
        var options = (0, exports.ParamCreater)().deleteServers(deleteServersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 从弹性云服务器中卸载磁盘。
     * @summary 弹性云服务器卸载磁盘
     * @param {string} serverId 云服务器ID。
     * @param {string} volumeId 磁盘ID。
     * @param {'0' | '1'} [deleteFlag] 是否强制卸载数据盘。  - 是，值为“1”。  - 否，值为“0”。  默认值为0。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.detachServerVolume = function (detachServerVolumeRequest) {
        var options = (0, exports.ParamCreater)().detachServerVolume(detachServerVolumeRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 虚拟IP地址用于为网卡提供第二个IP地址，同时支持与多个弹性云服务器的网卡绑定，从而实现多个弹性云服务器之间的高可用性。  该接口用于解绑定弹性云服务器网卡的虚拟IP地址。解绑后，网卡不会被删除。
     * @summary 云服务器网卡解绑虚拟IP地址
     * @param {string} nicId 云服务器网卡ID。
     * @param {DisassociateServerVirtualIpRequestBody} disassociateServerVirtualIpRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.disassociateServerVirtualIp = function (disassociateServerVirtualIpRequest) {
        var options = (0, exports.ParamCreater)().disassociateServerVirtualIp(disassociateServerVirtualIpRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询云服务器规格详情信息和规格扩展信息列表。
     * @summary 查询规格详情和规格扩展信息列表
     * @param {string} [availabilityZone] 可用区，需要指定可用区（AZ）的名称或者ID或者code。  可通过接口 [查询可用区列表接口](https://apiexplorer.developer.huaweicloud.com/apiexplorer/doc?product&#x3D;ECS&amp;api&#x3D;NovaListAvailabilityZones) 获取，也可参考[地区和终端节点](https://developer.huaweicloud.com/endpoint)获取。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.listFlavors = function (listFlavorsRequest) {
        var options = (0, exports.ParamCreater)().listFlavors(listFlavorsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 变更规格时，部分规格的云服务器之间不能互相变更。您可以通过本接口，通过指定弹性云服务器规格，查询该规格可以变更的规格列表。
     * @summary 查询云服务器规格变更支持列表
     * @param {string} [instanceUuid] 进行规格切换的云服务器ID，UUID格式。
     * @param {number} [limit] 单页面可显示的flavor条数最大值，默认是1000。
     * @param {string} [marker] 以单页最后一条flavor的ID作为分页标记。
     * @param {'asc' | 'desc'} [sortDir] 升序/降序排序，默认值为：asc。  取值范围：  - asc：表示升序。 - desc：表示降序
     * @param {'flavorid' | 'sort_key' | 'name' | 'memory_mb' | 'vcpus' | 'root_gb'} [sortKey] 排序字段。  key的取值范围：  - flavorid：表示规格ID。 - sort_key的默认值为“flavorid”。 - name：表示规格名称。 - memory_mb：表示内存大小。 - vcpus：表示CPU大小。 - root_gb：表示系统盘大小。
     * @param {string} [sourceFlavorId] 进行规格切换的云服务器源规格ID。
     * @param {string} [sourceFlavorName] 进行规格切换的云服务器源规格名称。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.listResizeFlavors = function (listResizeFlavorsRequest) {
        var options = (0, exports.ParamCreater)().listResizeFlavors(listResizeFlavorsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询弹性云服务器挂载的磁盘信息。
     * @summary 查询弹性云服务器磁盘信息
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.listServerBlockDevices = function (listServerBlockDevicesRequest) {
        var options = (0, exports.ParamCreater)().listServerBlockDevices(listServerBlockDevicesRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询弹性云服务器组。  与原生的创建云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
     * @summary 查询云服务器组列表
     * @param {number} [limit] 查询返回server group数量限制。
     * @param {string} [marker] 从marker指定的server group的下一条数据开始查询。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.listServerGroups = function (listServerGroupsRequest) {
        var options = (0, exports.ParamCreater)().listServerGroups(listServerGroupsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询云服务器网卡信息。
     * @summary 查询云服务器网卡信息
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.listServerInterfaces = function (listServerInterfacesRequest) {
        var options = (0, exports.ParamCreater)().listServerInterfaces(listServerInterfacesRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 项目（Project）用于将OpenStack的资源（计算资源、存储资源和网络资源）进行分组和隔离。项目可以是一个部门或者一个项目组。一个帐户中可以创建多个项目。  该接口用于查询用户在指定项目所使用的全部标签。
     * @summary 查询项目标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.listServerTags = function () {
        var options = (0, exports.ParamCreater)().listServerTags();
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据用户请求条件从数据库筛选、查询所有的弹性云服务器，并关联相关表获取到弹性云服务器的详细信息。  该接口支持查询弹性云服务器计费方式，以及是否被冻结。
     * @summary 查询云服务器详情列表
     * @param {string} [enterpriseProjectId] 查询绑定某个企业项目的弹性云服务器。  若需要查询当前用户所有企业项目绑定的弹性云服务，请传参all_granted_eps。
     * @param {string} [flavor] 云服务器规格ID,已上线的规格请参见《弹性云服务器用户指南》的“实例和应用场景”章节。
     * @param {string} [ip] IPv4地址过滤结果，匹配规则为模糊匹配。
     * @param {number} [limit] 查询返回云服务器当前页面的大小。每页最多返回1000台云服务器的信息。
     * @param {string} [name] 云服务器名称，匹配规则为模糊匹配。
     * @param {string} [notTags] 查询tag字段中不包含该值的云服务器。
     * @param {number} [offset] 页码。 当前页面数，默认为1。  取值大于等于0，取值为0时返回第1页。
     * @param {string} [reservationId] 批量创建弹性云服务器时，指定返回的ID，用于查询本次批量创建的弹性云服务器。
     * @param {string} [status] 云服务器状态。  取值范围：  ACTIVE， BUILD，DELETED，ERROR，HARD_REBOOT，MIGRATING，REBOOT，RESIZE，REVERT_RESIZE，SHELVED，SHELVED_OFFLOADED，SHUTOFF，UNKNOWN，VERIFY_RESIZE  只有管理员可以使用“deleted”状态过滤查询已经删除的弹性云服务器。  弹性云服务器状态说明请参考[云服务器状态](https://support.huaweicloud.com/api-ecs/ecs_08_0002.html)
     * @param {string} [tags] 查询tag字段中包含该值的云服务器。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.listServersDetails = function (listServersDetailsRequest) {
        var options = (0, exports.ParamCreater)().listServersDetails(listServersDetailsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * - 将部署在专属主机上的弹性云服务器迁移至其他专属主机。 - 将部署在专属主机上的弹性云服务器迁移至公共资源池，即不再部署在专属主机上。 - 将公共资源池的弹性云服务器迁移至专属主机上，成为专属主机上部署的弹性云服务器。
     * @summary 冷迁移云服务器
     * @param {string} serverId 云服务器ID。
     * @param {MigrateServerRequestBody} migrateServerRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.migrateServer = function (migrateServerRequest) {
        var options = (0, exports.ParamCreater)().migrateServer(migrateServerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 为弹性云服务器添加一个安全组。  添加多个安全组时，建议最多为弹性云服务器添加5个安全组。
     * @summary 添加安全组
     * @param {string} serverId 弹性云服务器ID。
     * @param {NovaAssociateSecurityGroupRequestBody} novaAssociateSecurityGroupRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaAssociateSecurityGroup = function (novaAssociateSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().novaAssociateSecurityGroup(novaAssociateSecurityGroupRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建SSH密钥，或把公钥导入系统，生成密钥对。  创建SSH密钥成功后，请把响应数据中的私钥内容保存到本地文件，用户使用该私钥登录云服务器云主机。为保证云服务器云主机器安全，私钥数据只能读取一次，请妥善保管。
     * @summary 创建和导入SSH密钥
     * @param {NovaCreateKeypairRequestBody} novaCreateKeypairRequestBody This is a auto create Body Object
     * @param {string} [openStackAPIVersion] 微版本头
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaCreateKeypair = function (novaCreateKeypairRequest) {
        var options = (0, exports.ParamCreater)().novaCreateKeypair(novaCreateKeypairRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 创建一台弹性云服务器。  弹性云服务器创建完成后，如需开启自动恢复功能，可以调用配置云服务器自动恢复的接口，具体使用请参见管理云服务器自动恢复动作。  该接口在云服务器创建失败后不支持自动回滚。若需要自动回滚能力，可以调用POST /v1/{project_id}/cloudservers接口，具体使用请参见创建云服务器（按需）。
     * @summary 创建云服务器
     * @param {NovaCreateServersRequestBody} novaCreateServersRequestBody This is a auto create Body Object
     * @param {string} [openStackAPIVersion] 微版本头
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaCreateServers = function (novaCreateServersRequest) {
        var options = (0, exports.ParamCreater)().novaCreateServers(novaCreateServersRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据SSH密钥的名称，删除指定SSH密钥。
     * @summary 删除SSH密钥
     * @param {string} keypairName 密钥名称。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaDeleteKeypair = function (novaDeleteKeypairRequest) {
        var options = (0, exports.ParamCreater)().novaDeleteKeypair(novaDeleteKeypairRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 删除一台云服务器。
     * @summary 删除云服务器
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaDeleteServer = function (novaDeleteServerRequest) {
        var options = (0, exports.ParamCreater)().novaDeleteServer(novaDeleteServerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 移除弹性云服务器中的安全组。
     * @summary 移除安全组
     * @param {string} serverId 云服务器ID。
     * @param {NovaDisassociateSecurityGroupRequestBody} novaDisassociateSecurityGroupRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaDisassociateSecurityGroup = function (novaDisassociateSecurityGroupRequest) {
        var options = (0, exports.ParamCreater)().novaDisassociateSecurityGroup(novaDisassociateSecurityGroupRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询可用域列表。
     * @summary 查询可用区列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaListAvailabilityZones = function () {
        var options = (0, exports.ParamCreater)().novaListAvailabilityZones();
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询SSH密钥信息列表。
     * @summary 查询SSH密钥列表
     * @param {number} [limit] 查询返回秘钥数量限制。  在微版本2.35后支持
     * @param {string} [marker] 从marker指定的keypair的名称的下一条数据开始查询。  在微版本2.35后支持。
     * @param {string} [openStackAPIVersion] 微版本头
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaListKeypairs = function (novaListKeypairsRequest) {
        var options = (0, exports.ParamCreater)().novaListKeypairs(novaListKeypairsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询指定弹性云服务器的安全组。
     * @summary 查询指定云服务器安全组列表
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaListServerSecurityGroups = function (novaListServerSecurityGroupsRequest) {
        var options = (0, exports.ParamCreater)().novaListServerSecurityGroups(novaListServerSecurityGroupsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询云服务器详情信息列表。
     * @summary 查询云服务器详情列表
     * @param {string} [changesSince] 云服务器上次更新状态的时间戳信息。时间戳为UTC格式。
     * @param {string} [flavor] 云服务器规格ID。
     * @param {string} [image] 镜像ID  在使用image作为条件过滤时，不能同时支持其他过滤条件和分页条件。如果同时指定image及其他条件，则以image条件为准；当条件不含image时，接口功能不受限制。
     * @param {string} [ip] IPv4地址过滤结果，匹配规则为模糊匹配。
     * @param {number} [limit] 查询返回云服务器数量限制。
     * @param {string} [marker] 从marker指定的云服务器ID的下一条数据开始查询。
     * @param {string} [name] 云服务器名称。
     * @param {string} [notTags] 查询tag字段中不包含该值的云服务器，值为标签的Key。  &gt; 说明： &gt;  &gt; 系统近期对标签功能进行了升级。如果之前添加的Tag为“Key.Value”的形式，则查询的时候需要使用“Key”来查询。 &gt;  &gt; 例如：之前添加的tag为“a.b”,则升级后，查询时需使用“not-tags&#x3D;a”。
     * @param {string} [reservationId] 批量创建弹性云服务器时，指定返回的ID，用于查询本次批量创建的弹性云服务器。
     * @param {'created_at' | 'availability_zone' | 'display_name' | 'host' | 'instance_type_id' | 'key_name' | 'project_id' | 'user_id' | 'updated_at' | 'uuid' | 'vm_state'} [sortKey] 查询结果按弹性云服务器属性排序，默认排序顺序为created_at逆序。
     * @param {'ACTIVE' | 'BUILD' | 'DELETED' | 'ERROR' | 'HARD_REBOOT' | 'MIGRATING' | 'REBOOT' | 'RESIZE' | 'REVERT_RESIZE' | 'SHELVED' | 'SHELVED_OFFLOADED' | 'SHUTOFF' | 'UNKNOWN' | 'VERIFY_RESIZE'} [status] 云服务器状态。  取值范围： ACTIVE， BUILD，DELETED，ERROR，HARD_REBOOT，MIGRATING，REBOOT，RESIZE，REVERT_RESIZE，SHELVED，SHELVED_OFFLOADED，SHUTOFF，UNKNOWN，VERIFY_RESIZE  直到2.37微版本，非上面范围的status字段将返回空列表，2.38之后的微版本，将返回400错误。  云服务器状态说明请参考[云服务器状态](https://support.huaweicloud.com/api-ecs/ecs_08_0002.html)。
     * @param {string} [tags] 查询tag字段中包含该值的云服务器。
     * @param {string} [openStackAPIVersion] 微版本头
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaListServersDetails = function (novaListServersDetailsRequest) {
        var options = (0, exports.ParamCreater)().novaListServersDetails(novaListServersDetailsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据SSH密钥名称查询指定SSH密钥。
     * @summary 查询SSH密钥详情
     * @param {string} keypairName 密钥名称信息。
     * @param {string} [openStackAPIVersion] 微版本头
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaShowKeypair = function (novaShowKeypairRequest) {
        var options = (0, exports.ParamCreater)().novaShowKeypair(novaShowKeypairRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 根据云服务器ID，查询云服务器的详细信息。
     * @summary 查询云服务器详情
     * @param {string} serverId 云服务器ID。
     * @param {string} [openStackAPIVersion] 微版本头
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.novaShowServer = function (novaShowServerRequest) {
        var options = (0, exports.ParamCreater)().novaShowServer(novaShowServerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 配置、删除云服务器自动恢复动作。
     * @summary 管理云服务器自动恢复动作
     * @param {string} serverId 云服务器ID。
     * @param {RegisterServerAutoRecoveryRequestBody} registerServerAutoRecoveryRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.registerServerAutoRecovery = function (registerServerAutoRecoveryRequest) {
        var options = (0, exports.ParamCreater)().registerServerAutoRecovery(registerServerAutoRecoveryRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 重装弹性云服务器的操作系统。支持弹性云服务器数据盘不变的情况下，使用原镜像重装系统盘。  调用该接口后，系统将卸载系统盘，然后使用原镜像重新创建系统盘，并挂载至弹性云服务器，实现重装操作系统功能。
     * @summary 重装弹性云服务器操作系统(安装Cloud-init)
     * @param {string} serverId 云服务器ID。
     * @param {ReinstallServerWithCloudInitRequestBody} reinstallServerWithCloudInitRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.reinstallServerWithCloudInit = function (reinstallServerWithCloudInitRequest) {
        var options = (0, exports.ParamCreater)().reinstallServerWithCloudInit(reinstallServerWithCloudInitRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 重装弹性云服务器的操作系统。  该接口支持未安装Cloud-init或Cloudbase-init的镜像。
     * @summary 重装弹性云服务器操作系统(未安装Cloud init)
     * @param {string} serverId 云服务器ID。
     * @param {ReinstallServerWithoutCloudInitRequestBody} reinstallServerWithoutCloudInitRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.reinstallServerWithoutCloudInit = function (reinstallServerWithoutCloudInitRequest) {
        var options = (0, exports.ParamCreater)().reinstallServerWithoutCloudInit(reinstallServerWithoutCloudInitRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 重置弹性云服务器管理帐号（root用户或Administrator用户）的密码。
     * @summary 一键重置弹性云服务器密码(企业项目)
     * @param {string} serverId 云服务器ID。
     * @param {ResetServerPasswordRequestBody} resetServerPasswordRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.resetServerPassword = function (resetServerPasswordRequest) {
        var options = (0, exports.ParamCreater)().resetServerPassword(resetServerPasswordRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 当您创建的弹性云服务器规格无法满足业务需要时，可以变更云服务器规格，升级vCPU、内存。具体接口的使用，请参见本节内容。  变更规格时，部分规格的云服务器之间不能互相变更。  您可以通过接口“/v1/{project_id}/cloudservers/resize_flavors?{instance_uuid,source_flavor_id,source_flavor_name}”查询支持列表。
     * @summary 变更云服务器规格(按需)
     * @param {string} serverId 云服务器ID。
     * @param {ResizePostPaidServerRequestBody} resizePostPaidServerRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.resizePostPaidServer = function (resizePostPaidServerRequest) {
        var options = (0, exports.ParamCreater)().resizePostPaidServer(resizePostPaidServerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 变更云服务器规格。  v1.1版本：指该接口兼容v1接口的功能，同时合入新功能，支持变更包年/包月弹性云服务器的规格。  注意事项：  - 该接口可以使用合作伙伴自身的AK/SK或者token调用，也可以用合作伙伴子客户的AK/SK或者token来调用。 - 如果使用AK/SK认证方式，示例代码中region请参考[地区和终端节点](https://developer.huaweicloud.com/endpoint)中“弹性云服务 ECS”下“区域”的内容，，serviceName（英文服务名称缩写）请指定为ECS。 - Endpoint请参考[地区和终端节点](https://developer.huaweicloud.com/endpoint)中“弹性云服务 ECS”下“终端节点（Endpoint）”的内容。
     * @summary 变更云服务器规格
     * @param {string} serverId 云服务器ID。
     * @param {ResizeServerRequestBody} resizeServerRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.resizeServer = function (resizeServerRequest) {
        var options = (0, exports.ParamCreater)().resizeServer(resizeServerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询弹性云服务器是否支持一键重置密码。
     * @summary 查询是否支持一键重置密码
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showResetPasswordFlag = function (showResetPasswordFlagRequest) {
        var options = (0, exports.ParamCreater)().showResetPasswordFlag(showResetPasswordFlagRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询弹性云服务器的详细信息。  该接口支持查询弹性云服务器的计费方式，以及是否被冻结。
     * @summary 查询云服务器详情
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServer = function (showServerRequest) {
        var options = (0, exports.ParamCreater)().showServer(showServerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询云服务器是否配置了自动恢复动作。
     * @summary 查询云服务器是否配置了自动恢复动作
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServerAutoRecovery = function (showServerAutoRecoveryRequest) {
        var options = (0, exports.ParamCreater)().showServerAutoRecovery(showServerAutoRecoveryRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询弹性云服务器挂载的单个磁盘信息。
     * @summary 查询弹性云服务器单个磁盘信息
     * @param {string} serverId 云服务器ID。
     * @param {string} volumeId 云硬盘ID，UUID格式。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServerBlockDevice = function (showServerBlockDeviceRequest) {
        var options = (0, exports.ParamCreater)().showServerBlockDevice(showServerBlockDeviceRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询弹性云服务器组详情。  与原生的创建云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
     * @summary 查询云服务器组详情
     * @param {string} serverGroupId 弹性云服务器组UUID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServerGroup = function (showServerGroupRequest) {
        var options = (0, exports.ParamCreater)().showServerGroup(showServerGroupRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询租户配额信息。
     * @summary 查询租户配额
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServerLimits = function () {
        var options = (0, exports.ParamCreater)().showServerLimits();
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 当通过支持Cloudbase-init功能的镜像创建Windows云服务器时，获取云服务器初始安装时系统生成的管理员帐户（Administrator帐户或Cloudbase-init设置的帐户）随机密码。
     * @summary 云服务器获取密码(企业项目)
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServerPassword = function (showServerPasswordRequest) {
        var options = (0, exports.ParamCreater)().showServerPassword(showServerPasswordRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 获取弹性云服务器VNC远程登录地址。
     * @summary 获取VNC远程登录地址
     * @param {string} serverId 云服务器ID。
     * @param {ShowServerRemoteConsoleRequestBody} showServerRemoteConsoleRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServerRemoteConsole = function (showServerRemoteConsoleRequest) {
        var options = (0, exports.ParamCreater)().showServerRemoteConsole(showServerRemoteConsoleRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * - 查询指定云服务器的标签信息。  - 标签管理服务TMS使用该接口查询指定云服务器的全部标签数据。
     * @summary 查询云服务器标签
     * @param {string} serverId 云服务器ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showServerTags = function (showServerTagsRequest) {
        var options = (0, exports.ParamCreater)().showServerTags(showServerTagsRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 修改云服务器信息，目前支持修改云服务器名称及描述和hostname。
     * @summary 修改云服务器
     * @param {string} serverId 云服务器ID。
     * @param {UpdateServerRequestBody} updateServerRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.updateServer = function (updateServerRequest) {
        var options = (0, exports.ParamCreater)().updateServer(updateServerRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 修改按需服务器，设置定时销毁时间。如果设置的销毁时间为空，表示取消销毁时间。  该接口支持企业项目细粒度权限的校验，具体细粒度请参见 ecs:cloudServers:put。
     * @summary 修改云服务器销毁时间
     * @param {string} serverId 云服务器ID。
     * @param {UpdateServerAutoTerminateTimeRequestBody} updateServerAutoTerminateTimeRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.updateServerAutoTerminateTime = function (updateServerAutoTerminateTimeRequest) {
        var options = (0, exports.ParamCreater)().updateServerAutoTerminateTime(updateServerAutoTerminateTimeRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 更新云服务器元数据。  - 如果元数据中没有待更新字段，则自动添加该字段。  - 如果元数据中已存在待更新字段，则直接更新字段值。  - 如果元数据中的字段不再请求参数中，则保持不变
     * @summary 更新云服务器元数据
     * @param {string} serverId 云服务器ID。
     * @param {UpdateServerMetadataRequestBody} updateServerMetadataRequestBody This is a auto create Body Object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.updateServerMetadata = function (updateServerMetadataRequest) {
        var options = (0, exports.ParamCreater)().updateServerMetadata(updateServerMetadataRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    /**
     * 查询Job的执行状态。  对于创建云服务器、删除云服务器、云服务器批量操作和网卡操作等异步API，命令下发后，会返回job_id，通过job_id可以查询任务的执行状态。
     * @summary 查询任务的执行状态
     * @param {string} jobId 异步请求的任务ID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    EcsClient.prototype.showJob = function (showJobRequest) {
        var options = (0, exports.ParamCreater)().showJob(showJobRequest);
        options['responseHeaders'] = [''];
        // @ts-ignore
        return this.hcClient.sendRequest(options);
    };
    return EcsClient;
}());
exports.EcsClient = EcsClient;
var ParamCreater = function () {
    return {
        /**
         * 将云服务器加入云服务器组。添加成功后，如果该云服务器组是反亲和性策略的，则该云服务器与云服务器组中的其他成员尽量分散地创建在不同主机上。如果该云服务器时故障域类型的，则该云服务器会拥有故障域属性。
         */
        addServerGroupMember: function (addServerGroupMemberRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/os-server-groups/{server_group_id}/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverGroupId;
            if (addServerGroupMemberRequest !== null && addServerGroupMemberRequest !== undefined) {
                if (addServerGroupMemberRequest instanceof AddServerGroupMemberRequest_1.AddServerGroupMemberRequest) {
                    serverGroupId = addServerGroupMemberRequest.serverGroupId;
                    body = addServerGroupMemberRequest.body;
                }
                else {
                    serverGroupId = addServerGroupMemberRequest['server_group_id'];
                    body = addServerGroupMemberRequest['body'];
                }
            }
            if (serverGroupId === null || serverGroupId === undefined) {
                throw new RequiredError('serverGroupId', 'Required parameter serverGroupId was null or undefined when calling addServerGroupMember.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_group_id': serverGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 虚拟IP地址用于为网卡提供第二个IP地址，同时支持与多个弹性云服务器的网卡绑定，从而实现多个弹性云服务器之间的高可用性。  该接口用于给云服务器网卡配置虚拟IP地址：  - 当指定的IP地址是一个不存在的虚拟IP地址时，系统会创建该虚拟IP，并绑定至对应网卡。  - 当指定的IP地址是一个已经创建好的私有IP时，系统会将指定的网卡和虚拟IP绑定。如果该IP的device_owner为空，则仅支持VPC内二三层通信；如果该IP的device_owner为neutron:VIP_PORT，则支持VPC内二三层通信、VPC之间对等连接访问，以及弹性公网IP、VPN、云专线等Internet接入。
         */
        associateServerVirtualIp: function (associateServerVirtualIpRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/cloudservers/nics/{nic_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var nicId;
            if (associateServerVirtualIpRequest !== null && associateServerVirtualIpRequest !== undefined) {
                if (associateServerVirtualIpRequest instanceof AssociateServerVirtualIpRequest_1.AssociateServerVirtualIpRequest) {
                    nicId = associateServerVirtualIpRequest.nicId;
                    body = associateServerVirtualIpRequest.body;
                }
                else {
                    nicId = associateServerVirtualIpRequest['nic_id'];
                    body = associateServerVirtualIpRequest['body'];
                }
            }
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId', 'Required parameter nicId was null or undefined when calling associateServerVirtualIp.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'nic_id': nicId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 把磁盘挂载到弹性云服务器上。
         */
        attachServerVolume: function (attachServerVolumeRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/attachvolume",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (attachServerVolumeRequest !== null && attachServerVolumeRequest !== undefined) {
                if (attachServerVolumeRequest instanceof AttachServerVolumeRequest_1.AttachServerVolumeRequest) {
                    serverId = attachServerVolumeRequest.serverId;
                    body = attachServerVolumeRequest.body;
                }
                else {
                    serverId = attachServerVolumeRequest['server_id'];
                    body = attachServerVolumeRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling attachServerVolume.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 给云服务器添加一张或多张网卡。
         */
        batchAddServerNics: function (batchAddServerNicsRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/nics",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (batchAddServerNicsRequest !== null && batchAddServerNicsRequest !== undefined) {
                if (batchAddServerNicsRequest instanceof BatchAddServerNicsRequest_1.BatchAddServerNicsRequest) {
                    serverId = batchAddServerNicsRequest.serverId;
                    body = batchAddServerNicsRequest.body;
                }
                else {
                    serverId = batchAddServerNicsRequest['server_id'];
                    body = batchAddServerNicsRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling batchAddServerNics.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 将指定的共享磁盘一次性挂载到多个弹性云服务器，实现批量挂载。
         */
        batchAttachSharableVolumes: function (batchAttachSharableVolumesRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/batchaction/attachvolumes/{volume_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var volumeId;
            if (batchAttachSharableVolumesRequest !== null && batchAttachSharableVolumesRequest !== undefined) {
                if (batchAttachSharableVolumesRequest instanceof BatchAttachSharableVolumesRequest_1.BatchAttachSharableVolumesRequest) {
                    volumeId = batchAttachSharableVolumesRequest.volumeId;
                    body = batchAttachSharableVolumesRequest.body;
                }
                else {
                    volumeId = batchAttachSharableVolumesRequest['volume_id'];
                    body = batchAttachSharableVolumesRequest['body'];
                }
            }
            if (volumeId === null || volumeId === undefined) {
                throw new RequiredError('volumeId', 'Required parameter volumeId was null or undefined when calling batchAttachSharableVolumes.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'volume_id': volumeId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * - 为指定云服务器批量添加标签。  - 标签管理服务TMS使用该接口批量管理云服务器的标签。
         */
        batchCreateServerTags: function (batchCreateServerTagsRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/tags/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (batchCreateServerTagsRequest !== null && batchCreateServerTagsRequest !== undefined) {
                if (batchCreateServerTagsRequest instanceof BatchCreateServerTagsRequest_1.BatchCreateServerTagsRequest) {
                    serverId = batchCreateServerTagsRequest.serverId;
                    body = batchCreateServerTagsRequest.body;
                }
                else {
                    serverId = batchCreateServerTagsRequest['server_id'];
                    body = batchCreateServerTagsRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling batchCreateServerTags.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 卸载并删除云服务器中的一张或多张网卡。
         */
        batchDeleteServerNics: function (batchDeleteServerNicsRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/nics/delete",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (batchDeleteServerNicsRequest !== null && batchDeleteServerNicsRequest !== undefined) {
                if (batchDeleteServerNicsRequest instanceof BatchDeleteServerNicsRequest_1.BatchDeleteServerNicsRequest) {
                    serverId = batchDeleteServerNicsRequest.serverId;
                    body = batchDeleteServerNicsRequest.body;
                }
                else {
                    serverId = batchDeleteServerNicsRequest['server_id'];
                    body = batchDeleteServerNicsRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling batchDeleteServerNics.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * - 为指定云服务器批量删除标签。  - 标签管理服务TMS使用该接口批量管理云服务器的标签。
         */
        batchDeleteServerTags: function (batchDeleteServerTagsRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/tags/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (batchDeleteServerTagsRequest !== null && batchDeleteServerTagsRequest !== undefined) {
                if (batchDeleteServerTagsRequest instanceof BatchDeleteServerTagsRequest_1.BatchDeleteServerTagsRequest) {
                    serverId = batchDeleteServerTagsRequest.serverId;
                    body = batchDeleteServerTagsRequest.body;
                }
                else {
                    serverId = batchDeleteServerTagsRequest['server_id'];
                    body = batchDeleteServerTagsRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling batchDeleteServerTags.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据给定的云服务器ID列表，批量重启云服务器，一次最多可以重启1000台。
         */
        batchRebootServers: function (batchRebootServersRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (batchRebootServersRequest !== null && batchRebootServersRequest !== undefined) {
                if (batchRebootServersRequest instanceof BatchRebootServersRequest_1.BatchRebootServersRequest) {
                    body = batchRebootServersRequest.body;
                }
                else {
                    body = batchRebootServersRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 批量重置弹性云服务器管理帐号（root用户或Administrator用户）的密码。
         */
        batchResetServersPassword: function (batchResetServersPasswordRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/cloudservers/os-reset-passwords",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (batchResetServersPasswordRequest !== null && batchResetServersPasswordRequest !== undefined) {
                if (batchResetServersPasswordRequest instanceof BatchResetServersPasswordRequest_1.BatchResetServersPasswordRequest) {
                    body = batchResetServersPasswordRequest.body;
                }
                else {
                    body = batchResetServersPasswordRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据给定的云服务器ID列表，批量启动云服务器，一次最多可以启动1000台。
         */
        batchStartServers: function (batchStartServersRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (batchStartServersRequest !== null && batchStartServersRequest !== undefined) {
                if (batchStartServersRequest instanceof BatchStartServersRequest_1.BatchStartServersRequest) {
                    body = batchStartServersRequest.body;
                }
                else {
                    body = batchStartServersRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据给定的云服务器ID列表，批量关闭云服务器，一次最多可以关闭1000台。
         */
        batchStopServers: function (batchStopServersRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (batchStopServersRequest !== null && batchStopServersRequest !== undefined) {
                if (batchStopServersRequest instanceof BatchStopServersRequest_1.BatchStopServersRequest) {
                    body = batchStopServersRequest.body;
                }
                else {
                    body = batchStopServersRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 批量修改弹性云服务器信息。 当前仅支持批量修改云服务器名称，一次最多可以修改1000台。
         */
        batchUpdateServersName: function (batchUpdateServersNameRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/cloudservers/server-name",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (batchUpdateServersNameRequest !== null && batchUpdateServersNameRequest !== undefined) {
                if (batchUpdateServersNameRequest instanceof BatchUpdateServersNameRequest_1.BatchUpdateServersNameRequest) {
                    body = batchUpdateServersNameRequest.body;
                }
                else {
                    body = batchUpdateServersNameRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 切换弹性云服务器操作系统。支持弹性云服务器数据盘不变的情况下，使用新镜像重装系统盘。  调用该接口后，系统将卸载系统盘，然后使用新镜像重新创建系统盘，并挂载至弹性云服务器，实现切换操作系统功能。
         */
        changeServerOsWithCloudInit: function (changeServerOsWithCloudInitRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/cloudservers/{server_id}/changeos",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (changeServerOsWithCloudInitRequest !== null && changeServerOsWithCloudInitRequest !== undefined) {
                if (changeServerOsWithCloudInitRequest instanceof ChangeServerOsWithCloudInitRequest_1.ChangeServerOsWithCloudInitRequest) {
                    serverId = changeServerOsWithCloudInitRequest.serverId;
                    body = changeServerOsWithCloudInitRequest.body;
                }
                else {
                    serverId = changeServerOsWithCloudInitRequest['server_id'];
                    body = changeServerOsWithCloudInitRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling changeServerOsWithCloudInit.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 切换弹性云服务器操作系统。  该接口支持未安装Cloud-init或Cloudbase-init的镜像使用。
         */
        changeServerOsWithoutCloudInit: function (changeServerOsWithoutCloudInitRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/changeos",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (changeServerOsWithoutCloudInitRequest !== null && changeServerOsWithoutCloudInitRequest !== undefined) {
                if (changeServerOsWithoutCloudInitRequest instanceof ChangeServerOsWithoutCloudInitRequest_1.ChangeServerOsWithoutCloudInitRequest) {
                    serverId = changeServerOsWithoutCloudInitRequest.serverId;
                    body = changeServerOsWithoutCloudInitRequest.body;
                }
                else {
                    serverId = changeServerOsWithoutCloudInitRequest['server_id'];
                    body = changeServerOsWithoutCloudInitRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling changeServerOsWithoutCloudInit.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建一台或多台[按需付费](https://support.huaweicloud.com/productdesc-ecs/ecs_01_0065.html)方式的云服务器。  弹性云服务器的登录鉴权方式包括两种：密钥对、密码。为安全起见，推荐使用密钥对方式。  - 密钥对 密钥对指使用密钥对作为弹性云服务器的鉴权方式。 接口调用方法：使用key_name字段，指定弹性云服务器登录时使用的密钥文件。  - 密码 密码指使用设置初始密码方式作为弹性云服务器的鉴权方式，此时，您可以通过用户名密码方式登录弹性云服务器，Linux操作系统时为root用户的初始密码，Windows操作系统时为Administrator用户的初始密码。  接口调用方法：使用adminPass字段，指定管理员帐号的初始登录密码。对于镜像已安装Cloud-init的Linux云服务器，如果需要使用密文密码，可以使用user_data字段进行密码注入。  &gt; 对于安装Cloud-init镜像的Linux云服务器云主机，若指定user_data字段，则adminPass字段无效。
         */
        createPostPaidServers: function (createPostPaidServersRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createPostPaidServersRequest !== null && createPostPaidServersRequest !== undefined) {
                if (createPostPaidServersRequest instanceof CreatePostPaidServersRequest_1.CreatePostPaidServersRequest) {
                    body = createPostPaidServersRequest.body;
                }
                else {
                    body = createPostPaidServersRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建弹性云服务器组。  与原生的创建云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
         */
        createServerGroup: function (createServerGroupRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/os-server-groups",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createServerGroupRequest !== null && createServerGroupRequest !== undefined) {
                if (createServerGroupRequest instanceof CreateServerGroupRequest_1.CreateServerGroupRequest) {
                    body = createServerGroupRequest.body;
                }
                else {
                    body = createServerGroupRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建一台或多台云服务器。  指该接口兼容《弹性云服务器接口参考》创建云服务器v1的功能，同时合入新功能，支持创建[包年/包月](https://support.huaweicloud.com/productdesc-ecs/ecs_01_0065.html)的弹性云服务器。  弹性云服务器的登录鉴权方式包括两种：密钥对、密码。为安全起见，推荐使用密钥对方式。  - 密钥对  指使用密钥对作为弹性云服务器的鉴权方式。  接口调用方法：使用key_name字段，指定弹性云服务器登录时使用的密钥文件。  - 密码  指使用设置初始密码方式作为弹性云服务器的鉴权方式，此时，您可以通过用户名密码方式登录弹性云服务器，Linux操作系统时为root用户的初始密码，Windows操作系统时为Administrator用户的初始密码。  接口调用方法：使用adminPass字段，指定管理员帐号的初始登录密码。对于镜像已安装Cloud-init的Linux云服务器，如果需要使用密文密码，可以使用user_data字段进行密码注入。  &gt; 对于安装Cloud-init镜像的Linux云服务器云主机，若指定user_data字段，则adminPass字段无效。  购买操作示例： - [使用API购买ECS过程中常见问题及处理方法](https://support.huaweicloud.com/api-ecs/ecs_04_0007.html) - [获取Token并检验Token的有效期 ](https://support.huaweicloud.com/api-ecs/ecs_04_0008.html)
         */
        createServers: function (createServersRequest) {
            var options = {
                method: "POST",
                url: "/v1.1/{project_id}/cloudservers",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (createServersRequest !== null && createServersRequest !== undefined) {
                if (createServersRequest instanceof CreateServersRequest_1.CreateServersRequest) {
                    body = createServersRequest.body;
                }
                else {
                    body = createServersRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除云服务器组。  与原生的删除云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
         */
        deleteServerGroup: function (deleteServerGroupRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/cloudservers/os-server-groups/{server_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverGroupId;
            if (deleteServerGroupRequest !== null && deleteServerGroupRequest !== undefined) {
                if (deleteServerGroupRequest instanceof DeleteServerGroupRequest_1.DeleteServerGroupRequest) {
                    serverGroupId = deleteServerGroupRequest.serverGroupId;
                }
                else {
                    serverGroupId = deleteServerGroupRequest['server_group_id'];
                }
            }
            if (serverGroupId === null || serverGroupId === undefined) {
                throw new RequiredError('serverGroupId', 'Required parameter serverGroupId was null or undefined when calling deleteServerGroup.');
            }
            options.pathParams = { 'server_group_id': serverGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 将弹性云服务器移出云服务器组。移出后，该云服务器与云服务器组中的成员不再遵从反亲和策略。
         */
        deleteServerGroupMember: function (deleteServerGroupMemberRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/os-server-groups/{server_group_id}/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverGroupId;
            if (deleteServerGroupMemberRequest !== null && deleteServerGroupMemberRequest !== undefined) {
                if (deleteServerGroupMemberRequest instanceof DeleteServerGroupMemberRequest_1.DeleteServerGroupMemberRequest) {
                    serverGroupId = deleteServerGroupMemberRequest.serverGroupId;
                    body = deleteServerGroupMemberRequest.body;
                }
                else {
                    serverGroupId = deleteServerGroupMemberRequest['server_group_id'];
                    body = deleteServerGroupMemberRequest['body'];
                }
            }
            if (serverGroupId === null || serverGroupId === undefined) {
                throw new RequiredError('serverGroupId', 'Required parameter serverGroupId was null or undefined when calling deleteServerGroupMember.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_group_id': serverGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除云服务器指定元数据。
         */
        deleteServerMetadata: function (deleteServerMetadataRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/cloudservers/{server_id}/metadata/{key}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var key;
            var serverId;
            if (deleteServerMetadataRequest !== null && deleteServerMetadataRequest !== undefined) {
                if (deleteServerMetadataRequest instanceof DeleteServerMetadataRequest_1.DeleteServerMetadataRequest) {
                    key = deleteServerMetadataRequest.key;
                    serverId = deleteServerMetadataRequest.serverId;
                }
                else {
                    key = deleteServerMetadataRequest['key'];
                    serverId = deleteServerMetadataRequest['server_id'];
                }
            }
            if (key === null || key === undefined) {
                throw new RequiredError('key', 'Required parameter key was null or undefined when calling deleteServerMetadata.');
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling deleteServerMetadata.');
            }
            options.pathParams = { 'key': key, 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 清除Windows云服务器初始安装时系统生成的密码记录。清除密码后，不影响云服务器密码登录功能，但不能再使用获取密码功能来查询该云服务器密码。
         */
        deleteServerPassword: function (deleteServerPasswordRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/cloudservers/{server_id}/os-server-password",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (deleteServerPasswordRequest !== null && deleteServerPasswordRequest !== undefined) {
                if (deleteServerPasswordRequest instanceof DeleteServerPasswordRequest_1.DeleteServerPasswordRequest) {
                    serverId = deleteServerPasswordRequest.serverId;
                }
                else {
                    serverId = deleteServerPasswordRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling deleteServerPassword.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据指定的云服务器ID列表，删除云服务器。  系统支持删除单台云服务器和批量删除多台云服务器操作，批量删除云服务器时，一次最多可以删除1000台。
         */
        deleteServers: function (deleteServersRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/delete",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            if (deleteServersRequest !== null && deleteServersRequest !== undefined) {
                if (deleteServersRequest instanceof DeleteServersRequest_1.DeleteServersRequest) {
                    body = deleteServersRequest.body;
                }
                else {
                    body = deleteServersRequest['body'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 从弹性云服务器中卸载磁盘。
         */
        detachServerVolume: function (detachServerVolumeRequest) {
            var options = {
                method: "DELETE",
                url: "/v1/{project_id}/cloudservers/{server_id}/detachvolume/{volume_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var serverId;
            var volumeId;
            var deleteFlag;
            if (detachServerVolumeRequest !== null && detachServerVolumeRequest !== undefined) {
                if (detachServerVolumeRequest instanceof DetachServerVolumeRequest_1.DetachServerVolumeRequest) {
                    serverId = detachServerVolumeRequest.serverId;
                    volumeId = detachServerVolumeRequest.volumeId;
                    deleteFlag = detachServerVolumeRequest.deleteFlag;
                }
                else {
                    serverId = detachServerVolumeRequest['server_id'];
                    volumeId = detachServerVolumeRequest['volume_id'];
                    deleteFlag = detachServerVolumeRequest['delete_flag'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling detachServerVolume.');
            }
            if (volumeId === null || volumeId === undefined) {
                throw new RequiredError('volumeId', 'Required parameter volumeId was null or undefined when calling detachServerVolume.');
            }
            if (deleteFlag !== null && deleteFlag !== undefined) {
                localVarQueryParameter['delete_flag'] = deleteFlag;
            }
            options.queryParams = localVarQueryParameter;
            options.pathParams = { 'server_id': serverId, 'volume_id': volumeId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 虚拟IP地址用于为网卡提供第二个IP地址，同时支持与多个弹性云服务器的网卡绑定，从而实现多个弹性云服务器之间的高可用性。  该接口用于解绑定弹性云服务器网卡的虚拟IP地址。解绑后，网卡不会被删除。
         */
        disassociateServerVirtualIp: function (disassociateServerVirtualIpRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/cloudservers/nics/{nic_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var nicId;
            if (disassociateServerVirtualIpRequest !== null && disassociateServerVirtualIpRequest !== undefined) {
                if (disassociateServerVirtualIpRequest instanceof DisassociateServerVirtualIpRequest_1.DisassociateServerVirtualIpRequest) {
                    nicId = disassociateServerVirtualIpRequest.nicId;
                    body = disassociateServerVirtualIpRequest.body;
                }
                else {
                    nicId = disassociateServerVirtualIpRequest['nic_id'];
                    body = disassociateServerVirtualIpRequest['body'];
                }
            }
            if (nicId === null || nicId === undefined) {
                throw new RequiredError('nicId', 'Required parameter nicId was null or undefined when calling disassociateServerVirtualIp.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'nic_id': nicId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询云服务器规格详情信息和规格扩展信息列表。
         */
        listFlavors: function (listFlavorsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/flavors",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var availabilityZone;
            if (listFlavorsRequest !== null && listFlavorsRequest !== undefined) {
                if (listFlavorsRequest instanceof ListFlavorsRequest_1.ListFlavorsRequest) {
                    availabilityZone = listFlavorsRequest.availabilityZone;
                }
                else {
                    availabilityZone = listFlavorsRequest['availability_zone'];
                }
            }
            if (availabilityZone !== null && availabilityZone !== undefined) {
                localVarQueryParameter['availability_zone'] = availabilityZone;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 变更规格时，部分规格的云服务器之间不能互相变更。您可以通过本接口，通过指定弹性云服务器规格，查询该规格可以变更的规格列表。
         */
        listResizeFlavors: function (listResizeFlavorsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/resize_flavors",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var instanceUuid;
            var limit;
            var marker;
            var sortDir;
            var sortKey;
            var sourceFlavorId;
            var sourceFlavorName;
            if (listResizeFlavorsRequest !== null && listResizeFlavorsRequest !== undefined) {
                if (listResizeFlavorsRequest instanceof ListResizeFlavorsRequest_1.ListResizeFlavorsRequest) {
                    instanceUuid = listResizeFlavorsRequest.instanceUuid;
                    limit = listResizeFlavorsRequest.limit;
                    marker = listResizeFlavorsRequest.marker;
                    sortDir = listResizeFlavorsRequest.sortDir;
                    sortKey = listResizeFlavorsRequest.sortKey;
                    sourceFlavorId = listResizeFlavorsRequest.sourceFlavorId;
                    sourceFlavorName = listResizeFlavorsRequest.sourceFlavorName;
                }
                else {
                    instanceUuid = listResizeFlavorsRequest['instance_uuid'];
                    limit = listResizeFlavorsRequest['limit'];
                    marker = listResizeFlavorsRequest['marker'];
                    sortDir = listResizeFlavorsRequest['sort_dir'];
                    sortKey = listResizeFlavorsRequest['sort_key'];
                    sourceFlavorId = listResizeFlavorsRequest['source_flavor_id'];
                    sourceFlavorName = listResizeFlavorsRequest['source_flavor_name'];
                }
            }
            if (instanceUuid !== null && instanceUuid !== undefined) {
                localVarQueryParameter['instance_uuid'] = instanceUuid;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (sortDir !== null && sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }
            if (sourceFlavorId !== null && sourceFlavorId !== undefined) {
                localVarQueryParameter['source_flavor_id'] = sourceFlavorId;
            }
            if (sourceFlavorName !== null && sourceFlavorName !== undefined) {
                localVarQueryParameter['source_flavor_name'] = sourceFlavorName;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询弹性云服务器挂载的磁盘信息。
         */
        listServerBlockDevices: function (listServerBlockDevicesRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}/block_device",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (listServerBlockDevicesRequest !== null && listServerBlockDevicesRequest !== undefined) {
                if (listServerBlockDevicesRequest instanceof ListServerBlockDevicesRequest_1.ListServerBlockDevicesRequest) {
                    serverId = listServerBlockDevicesRequest.serverId;
                }
                else {
                    serverId = listServerBlockDevicesRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling listServerBlockDevices.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询弹性云服务器组。  与原生的创建云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
         */
        listServerGroups: function (listServerGroupsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/os-server-groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            if (listServerGroupsRequest !== null && listServerGroupsRequest !== undefined) {
                if (listServerGroupsRequest instanceof ListServerGroupsRequest_1.ListServerGroupsRequest) {
                    limit = listServerGroupsRequest.limit;
                    marker = listServerGroupsRequest.marker;
                }
                else {
                    limit = listServerGroupsRequest['limit'];
                    marker = listServerGroupsRequest['marker'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询云服务器网卡信息。
         */
        listServerInterfaces: function (listServerInterfacesRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}/os-interface",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (listServerInterfacesRequest !== null && listServerInterfacesRequest !== undefined) {
                if (listServerInterfacesRequest instanceof ListServerInterfacesRequest_1.ListServerInterfacesRequest) {
                    serverId = listServerInterfacesRequest.serverId;
                }
                else {
                    serverId = listServerInterfacesRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling listServerInterfaces.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 项目（Project）用于将OpenStack的资源（计算资源、存储资源和网络资源）进行分组和隔离。项目可以是一个部门或者一个项目组。一个帐户中可以创建多个项目。  该接口用于查询用户在指定项目所使用的全部标签。
         */
        listServerTags: function () {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/tags",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据用户请求条件从数据库筛选、查询所有的弹性云服务器，并关联相关表获取到弹性云服务器的详细信息。  该接口支持查询弹性云服务器计费方式，以及是否被冻结。
         */
        listServersDetails: function (listServersDetailsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var enterpriseProjectId;
            var flavor;
            var ip;
            var limit;
            var name;
            var notTags;
            var offset;
            var reservationId;
            var status;
            var tags;
            if (listServersDetailsRequest !== null && listServersDetailsRequest !== undefined) {
                if (listServersDetailsRequest instanceof ListServersDetailsRequest_1.ListServersDetailsRequest) {
                    enterpriseProjectId = listServersDetailsRequest.enterpriseProjectId;
                    flavor = listServersDetailsRequest.flavor;
                    ip = listServersDetailsRequest.ip;
                    limit = listServersDetailsRequest.limit;
                    name = listServersDetailsRequest.name;
                    notTags = listServersDetailsRequest.notTags;
                    offset = listServersDetailsRequest.offset;
                    reservationId = listServersDetailsRequest.reservationId;
                    status = listServersDetailsRequest.status;
                    tags = listServersDetailsRequest.tags;
                }
                else {
                    enterpriseProjectId = listServersDetailsRequest['enterprise_project_id'];
                    flavor = listServersDetailsRequest['flavor'];
                    ip = listServersDetailsRequest['ip'];
                    limit = listServersDetailsRequest['limit'];
                    name = listServersDetailsRequest['name'];
                    notTags = listServersDetailsRequest['not-tags'];
                    offset = listServersDetailsRequest['offset'];
                    reservationId = listServersDetailsRequest['reservation_id'];
                    status = listServersDetailsRequest['status'];
                    tags = listServersDetailsRequest['tags'];
                }
            }
            if (enterpriseProjectId !== null && enterpriseProjectId !== undefined) {
                localVarQueryParameter['enterprise_project_id'] = enterpriseProjectId;
            }
            if (flavor !== null && flavor !== undefined) {
                localVarQueryParameter['flavor'] = flavor;
            }
            if (ip !== null && ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (notTags !== null && notTags !== undefined) {
                localVarQueryParameter['not-tags'] = notTags;
            }
            if (offset !== null && offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (reservationId !== null && reservationId !== undefined) {
                localVarQueryParameter['reservation_id'] = reservationId;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (tags !== null && tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * - 将部署在专属主机上的弹性云服务器迁移至其他专属主机。 - 将部署在专属主机上的弹性云服务器迁移至公共资源池，即不再部署在专属主机上。 - 将公共资源池的弹性云服务器迁移至专属主机上，成为专属主机上部署的弹性云服务器。
         */
        migrateServer: function (migrateServerRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/migrate",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (migrateServerRequest !== null && migrateServerRequest !== undefined) {
                if (migrateServerRequest instanceof MigrateServerRequest_1.MigrateServerRequest) {
                    serverId = migrateServerRequest.serverId;
                    body = migrateServerRequest.body;
                }
                else {
                    serverId = migrateServerRequest['server_id'];
                    body = migrateServerRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling migrateServer.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 为弹性云服务器添加一个安全组。  添加多个安全组时，建议最多为弹性云服务器添加5个安全组。
         */
        novaAssociateSecurityGroup: function (novaAssociateSecurityGroupRequest) {
            var options = {
                method: "POST",
                url: "/v2.1/{project_id}/servers/{server_id}/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (novaAssociateSecurityGroupRequest !== null && novaAssociateSecurityGroupRequest !== undefined) {
                if (novaAssociateSecurityGroupRequest instanceof NovaAssociateSecurityGroupRequest_1.NovaAssociateSecurityGroupRequest) {
                    serverId = novaAssociateSecurityGroupRequest.serverId;
                    body = novaAssociateSecurityGroupRequest.body;
                }
                else {
                    serverId = novaAssociateSecurityGroupRequest['server_id'];
                    body = novaAssociateSecurityGroupRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling novaAssociateSecurityGroup.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建SSH密钥，或把公钥导入系统，生成密钥对。  创建SSH密钥成功后，请把响应数据中的私钥内容保存到本地文件，用户使用该私钥登录云服务器云主机。为保证云服务器云主机器安全，私钥数据只能读取一次，请妥善保管。
         */
        novaCreateKeypair: function (novaCreateKeypairRequest) {
            var options = {
                method: "POST",
                url: "/v2.1/{project_id}/os-keypairs",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var openStackAPIVersion;
            if (novaCreateKeypairRequest !== null && novaCreateKeypairRequest !== undefined) {
                if (novaCreateKeypairRequest instanceof NovaCreateKeypairRequest_1.NovaCreateKeypairRequest) {
                    body = novaCreateKeypairRequest.body;
                    openStackAPIVersion = novaCreateKeypairRequest.openStackAPIVersion;
                }
                else {
                    body = novaCreateKeypairRequest['body'];
                    openStackAPIVersion = novaCreateKeypairRequest['OpenStack-API-Version'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (openStackAPIVersion !== undefined && openStackAPIVersion !== null) {
                localVarHeaderParameter['OpenStack-API-Version'] = String(openStackAPIVersion);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 创建一台弹性云服务器。  弹性云服务器创建完成后，如需开启自动恢复功能，可以调用配置云服务器自动恢复的接口，具体使用请参见管理云服务器自动恢复动作。  该接口在云服务器创建失败后不支持自动回滚。若需要自动回滚能力，可以调用POST /v1/{project_id}/cloudservers接口，具体使用请参见创建云服务器（按需）。
         */
        novaCreateServers: function (novaCreateServersRequest) {
            var options = {
                method: "POST",
                url: "/v2.1/{project_id}/servers",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var openStackAPIVersion;
            if (novaCreateServersRequest !== null && novaCreateServersRequest !== undefined) {
                if (novaCreateServersRequest instanceof NovaCreateServersRequest_1.NovaCreateServersRequest) {
                    body = novaCreateServersRequest.body;
                    openStackAPIVersion = novaCreateServersRequest.openStackAPIVersion;
                }
                else {
                    body = novaCreateServersRequest['body'];
                    openStackAPIVersion = novaCreateServersRequest['OpenStack-API-Version'];
                }
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            if (openStackAPIVersion !== undefined && openStackAPIVersion !== null) {
                localVarHeaderParameter['OpenStack-API-Version'] = String(openStackAPIVersion);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据SSH密钥的名称，删除指定SSH密钥。
         */
        novaDeleteKeypair: function (novaDeleteKeypairRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.1/{project_id}/os-keypairs/{keypair_name}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var keypairName;
            if (novaDeleteKeypairRequest !== null && novaDeleteKeypairRequest !== undefined) {
                if (novaDeleteKeypairRequest instanceof NovaDeleteKeypairRequest_1.NovaDeleteKeypairRequest) {
                    keypairName = novaDeleteKeypairRequest.keypairName;
                }
                else {
                    keypairName = novaDeleteKeypairRequest['keypair_name'];
                }
            }
            if (keypairName === null || keypairName === undefined) {
                throw new RequiredError('keypairName', 'Required parameter keypairName was null or undefined when calling novaDeleteKeypair.');
            }
            options.pathParams = { 'keypair_name': keypairName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 删除一台云服务器。
         */
        novaDeleteServer: function (novaDeleteServerRequest) {
            var options = {
                method: "DELETE",
                url: "/v2.1/{project_id}/servers/{server_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (novaDeleteServerRequest !== null && novaDeleteServerRequest !== undefined) {
                if (novaDeleteServerRequest instanceof NovaDeleteServerRequest_1.NovaDeleteServerRequest) {
                    serverId = novaDeleteServerRequest.serverId;
                }
                else {
                    serverId = novaDeleteServerRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling novaDeleteServer.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 移除弹性云服务器中的安全组。
         */
        novaDisassociateSecurityGroup: function (novaDisassociateSecurityGroupRequest) {
            var options = {
                method: "POST",
                url: "/v2.1/{project_id}/servers/{server_id}/action",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (novaDisassociateSecurityGroupRequest !== null && novaDisassociateSecurityGroupRequest !== undefined) {
                if (novaDisassociateSecurityGroupRequest instanceof NovaDisassociateSecurityGroupRequest_1.NovaDisassociateSecurityGroupRequest) {
                    serverId = novaDisassociateSecurityGroupRequest.serverId;
                    body = novaDisassociateSecurityGroupRequest.body;
                }
                else {
                    serverId = novaDisassociateSecurityGroupRequest['server_id'];
                    body = novaDisassociateSecurityGroupRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling novaDisassociateSecurityGroup.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询可用域列表。
         */
        novaListAvailabilityZones: function () {
            var options = {
                method: "GET",
                url: "/v2.1/{project_id}/os-availability-zone",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询SSH密钥信息列表。
         */
        novaListKeypairs: function (novaListKeypairsRequest) {
            var options = {
                method: "GET",
                url: "/v2.1/{project_id}/os-keypairs",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var limit;
            var marker;
            var openStackAPIVersion;
            if (novaListKeypairsRequest !== null && novaListKeypairsRequest !== undefined) {
                if (novaListKeypairsRequest instanceof NovaListKeypairsRequest_1.NovaListKeypairsRequest) {
                    limit = novaListKeypairsRequest.limit;
                    marker = novaListKeypairsRequest.marker;
                    openStackAPIVersion = novaListKeypairsRequest.openStackAPIVersion;
                }
                else {
                    limit = novaListKeypairsRequest['limit'];
                    marker = novaListKeypairsRequest['marker'];
                    openStackAPIVersion = novaListKeypairsRequest['OpenStack-API-Version'];
                }
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (openStackAPIVersion !== undefined && openStackAPIVersion !== null) {
                localVarHeaderParameter['OpenStack-API-Version'] = String(openStackAPIVersion);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询指定弹性云服务器的安全组。
         */
        novaListServerSecurityGroups: function (novaListServerSecurityGroupsRequest) {
            var options = {
                method: "GET",
                url: "/v2.1/{project_id}/servers/{server_id}/os-security-groups",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (novaListServerSecurityGroupsRequest !== null && novaListServerSecurityGroupsRequest !== undefined) {
                if (novaListServerSecurityGroupsRequest instanceof NovaListServerSecurityGroupsRequest_1.NovaListServerSecurityGroupsRequest) {
                    serverId = novaListServerSecurityGroupsRequest.serverId;
                }
                else {
                    serverId = novaListServerSecurityGroupsRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling novaListServerSecurityGroups.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询云服务器详情信息列表。
         */
        novaListServersDetails: function (novaListServersDetailsRequest) {
            var options = {
                method: "GET",
                url: "/v2.1/{project_id}/servers/detail",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            var changesSince;
            var flavor;
            var image;
            var ip;
            var limit;
            var marker;
            var name;
            var notTags;
            var reservationId;
            var sortKey;
            var status;
            var tags;
            var openStackAPIVersion;
            if (novaListServersDetailsRequest !== null && novaListServersDetailsRequest !== undefined) {
                if (novaListServersDetailsRequest instanceof NovaListServersDetailsRequest_1.NovaListServersDetailsRequest) {
                    changesSince = novaListServersDetailsRequest.changesSince;
                    flavor = novaListServersDetailsRequest.flavor;
                    image = novaListServersDetailsRequest.image;
                    ip = novaListServersDetailsRequest.ip;
                    limit = novaListServersDetailsRequest.limit;
                    marker = novaListServersDetailsRequest.marker;
                    name = novaListServersDetailsRequest.name;
                    notTags = novaListServersDetailsRequest.notTags;
                    reservationId = novaListServersDetailsRequest.reservationId;
                    sortKey = novaListServersDetailsRequest.sortKey;
                    status = novaListServersDetailsRequest.status;
                    tags = novaListServersDetailsRequest.tags;
                    openStackAPIVersion = novaListServersDetailsRequest.openStackAPIVersion;
                }
                else {
                    changesSince = novaListServersDetailsRequest['changes-since'];
                    flavor = novaListServersDetailsRequest['flavor'];
                    image = novaListServersDetailsRequest['image'];
                    ip = novaListServersDetailsRequest['ip'];
                    limit = novaListServersDetailsRequest['limit'];
                    marker = novaListServersDetailsRequest['marker'];
                    name = novaListServersDetailsRequest['name'];
                    notTags = novaListServersDetailsRequest['not-tags'];
                    reservationId = novaListServersDetailsRequest['reservation_id'];
                    sortKey = novaListServersDetailsRequest['sort_key'];
                    status = novaListServersDetailsRequest['status'];
                    tags = novaListServersDetailsRequest['tags'];
                    openStackAPIVersion = novaListServersDetailsRequest['OpenStack-API-Version'];
                }
            }
            if (changesSince !== null && changesSince !== undefined) {
                localVarQueryParameter['changes-since'] = changesSince;
            }
            if (flavor !== null && flavor !== undefined) {
                localVarQueryParameter['flavor'] = flavor;
            }
            if (image !== null && image !== undefined) {
                localVarQueryParameter['image'] = image;
            }
            if (ip !== null && ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }
            if (limit !== null && limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (marker !== null && marker !== undefined) {
                localVarQueryParameter['marker'] = marker;
            }
            if (name !== null && name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            if (notTags !== null && notTags !== undefined) {
                localVarQueryParameter['not-tags'] = notTags;
            }
            if (reservationId !== null && reservationId !== undefined) {
                localVarQueryParameter['reservation_id'] = reservationId;
            }
            if (sortKey !== null && sortKey !== undefined) {
                localVarQueryParameter['sort_key'] = sortKey;
            }
            if (status !== null && status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (tags !== null && tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }
            if (openStackAPIVersion !== undefined && openStackAPIVersion !== null) {
                localVarHeaderParameter['OpenStack-API-Version'] = String(openStackAPIVersion);
            }
            options.queryParams = localVarQueryParameter;
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据SSH密钥名称查询指定SSH密钥。
         */
        novaShowKeypair: function (novaShowKeypairRequest) {
            var options = {
                method: "GET",
                url: "/v2.1/{project_id}/os-keypairs/{keypair_name}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var keypairName;
            var openStackAPIVersion;
            if (novaShowKeypairRequest !== null && novaShowKeypairRequest !== undefined) {
                if (novaShowKeypairRequest instanceof NovaShowKeypairRequest_1.NovaShowKeypairRequest) {
                    keypairName = novaShowKeypairRequest.keypairName;
                    openStackAPIVersion = novaShowKeypairRequest.openStackAPIVersion;
                }
                else {
                    keypairName = novaShowKeypairRequest['keypair_name'];
                    openStackAPIVersion = novaShowKeypairRequest['OpenStack-API-Version'];
                }
            }
            if (keypairName === null || keypairName === undefined) {
                throw new RequiredError('keypairName', 'Required parameter keypairName was null or undefined when calling novaShowKeypair.');
            }
            if (openStackAPIVersion !== undefined && openStackAPIVersion !== null) {
                localVarHeaderParameter['OpenStack-API-Version'] = String(openStackAPIVersion);
            }
            options.pathParams = { 'keypair_name': keypairName, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 根据云服务器ID，查询云服务器的详细信息。
         */
        novaShowServer: function (novaShowServerRequest) {
            var options = {
                method: "GET",
                url: "/v2.1/{project_id}/servers/{server_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            var openStackAPIVersion;
            if (novaShowServerRequest !== null && novaShowServerRequest !== undefined) {
                if (novaShowServerRequest instanceof NovaShowServerRequest_1.NovaShowServerRequest) {
                    serverId = novaShowServerRequest.serverId;
                    openStackAPIVersion = novaShowServerRequest.openStackAPIVersion;
                }
                else {
                    serverId = novaShowServerRequest['server_id'];
                    openStackAPIVersion = novaShowServerRequest['OpenStack-API-Version'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling novaShowServer.');
            }
            if (openStackAPIVersion !== undefined && openStackAPIVersion !== null) {
                localVarHeaderParameter['OpenStack-API-Version'] = String(openStackAPIVersion);
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 配置、删除云服务器自动恢复动作。
         */
        registerServerAutoRecovery: function (registerServerAutoRecoveryRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/cloudservers/{server_id}/autorecovery",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (registerServerAutoRecoveryRequest !== null && registerServerAutoRecoveryRequest !== undefined) {
                if (registerServerAutoRecoveryRequest instanceof RegisterServerAutoRecoveryRequest_1.RegisterServerAutoRecoveryRequest) {
                    serverId = registerServerAutoRecoveryRequest.serverId;
                    body = registerServerAutoRecoveryRequest.body;
                }
                else {
                    serverId = registerServerAutoRecoveryRequest['server_id'];
                    body = registerServerAutoRecoveryRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling registerServerAutoRecovery.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 重装弹性云服务器的操作系统。支持弹性云服务器数据盘不变的情况下，使用原镜像重装系统盘。  调用该接口后，系统将卸载系统盘，然后使用原镜像重新创建系统盘，并挂载至弹性云服务器，实现重装操作系统功能。
         */
        reinstallServerWithCloudInit: function (reinstallServerWithCloudInitRequest) {
            var options = {
                method: "POST",
                url: "/v2/{project_id}/cloudservers/{server_id}/reinstallos",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (reinstallServerWithCloudInitRequest !== null && reinstallServerWithCloudInitRequest !== undefined) {
                if (reinstallServerWithCloudInitRequest instanceof ReinstallServerWithCloudInitRequest_1.ReinstallServerWithCloudInitRequest) {
                    serverId = reinstallServerWithCloudInitRequest.serverId;
                    body = reinstallServerWithCloudInitRequest.body;
                }
                else {
                    serverId = reinstallServerWithCloudInitRequest['server_id'];
                    body = reinstallServerWithCloudInitRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling reinstallServerWithCloudInit.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 重装弹性云服务器的操作系统。  该接口支持未安装Cloud-init或Cloudbase-init的镜像。
         */
        reinstallServerWithoutCloudInit: function (reinstallServerWithoutCloudInitRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/reinstallos",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (reinstallServerWithoutCloudInitRequest !== null && reinstallServerWithoutCloudInitRequest !== undefined) {
                if (reinstallServerWithoutCloudInitRequest instanceof ReinstallServerWithoutCloudInitRequest_1.ReinstallServerWithoutCloudInitRequest) {
                    serverId = reinstallServerWithoutCloudInitRequest.serverId;
                    body = reinstallServerWithoutCloudInitRequest.body;
                }
                else {
                    serverId = reinstallServerWithoutCloudInitRequest['server_id'];
                    body = reinstallServerWithoutCloudInitRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling reinstallServerWithoutCloudInit.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 重置弹性云服务器管理帐号（root用户或Administrator用户）的密码。
         */
        resetServerPassword: function (resetServerPasswordRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/cloudservers/{server_id}/os-reset-password",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (resetServerPasswordRequest !== null && resetServerPasswordRequest !== undefined) {
                if (resetServerPasswordRequest instanceof ResetServerPasswordRequest_1.ResetServerPasswordRequest) {
                    serverId = resetServerPasswordRequest.serverId;
                    body = resetServerPasswordRequest.body;
                }
                else {
                    serverId = resetServerPasswordRequest['server_id'];
                    body = resetServerPasswordRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling resetServerPassword.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 当您创建的弹性云服务器规格无法满足业务需要时，可以变更云服务器规格，升级vCPU、内存。具体接口的使用，请参见本节内容。  变更规格时，部分规格的云服务器之间不能互相变更。  您可以通过接口“/v1/{project_id}/cloudservers/resize_flavors?{instance_uuid,source_flavor_id,source_flavor_name}”查询支持列表。
         */
        resizePostPaidServer: function (resizePostPaidServerRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/resize",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (resizePostPaidServerRequest !== null && resizePostPaidServerRequest !== undefined) {
                if (resizePostPaidServerRequest instanceof ResizePostPaidServerRequest_1.ResizePostPaidServerRequest) {
                    serverId = resizePostPaidServerRequest.serverId;
                    body = resizePostPaidServerRequest.body;
                }
                else {
                    serverId = resizePostPaidServerRequest['server_id'];
                    body = resizePostPaidServerRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling resizePostPaidServer.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 变更云服务器规格。  v1.1版本：指该接口兼容v1接口的功能，同时合入新功能，支持变更包年/包月弹性云服务器的规格。  注意事项：  - 该接口可以使用合作伙伴自身的AK/SK或者token调用，也可以用合作伙伴子客户的AK/SK或者token来调用。 - 如果使用AK/SK认证方式，示例代码中region请参考[地区和终端节点](https://developer.huaweicloud.com/endpoint)中“弹性云服务 ECS”下“区域”的内容，，serviceName（英文服务名称缩写）请指定为ECS。 - Endpoint请参考[地区和终端节点](https://developer.huaweicloud.com/endpoint)中“弹性云服务 ECS”下“终端节点（Endpoint）”的内容。
         */
        resizeServer: function (resizeServerRequest) {
            var options = {
                method: "POST",
                url: "/v1.1/{project_id}/cloudservers/{server_id}/resize",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (resizeServerRequest !== null && resizeServerRequest !== undefined) {
                if (resizeServerRequest instanceof ResizeServerRequest_1.ResizeServerRequest) {
                    serverId = resizeServerRequest.serverId;
                    body = resizeServerRequest.body;
                }
                else {
                    serverId = resizeServerRequest['server_id'];
                    body = resizeServerRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling resizeServer.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询弹性云服务器是否支持一键重置密码。
         */
        showResetPasswordFlag: function (showResetPasswordFlagRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}/os-resetpwd-flag",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (showResetPasswordFlagRequest !== null && showResetPasswordFlagRequest !== undefined) {
                if (showResetPasswordFlagRequest instanceof ShowResetPasswordFlagRequest_1.ShowResetPasswordFlagRequest) {
                    serverId = showResetPasswordFlagRequest.serverId;
                }
                else {
                    serverId = showResetPasswordFlagRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling showResetPasswordFlag.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询弹性云服务器的详细信息。  该接口支持查询弹性云服务器的计费方式，以及是否被冻结。
         */
        showServer: function (showServerRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (showServerRequest !== null && showServerRequest !== undefined) {
                if (showServerRequest instanceof ShowServerRequest_1.ShowServerRequest) {
                    serverId = showServerRequest.serverId;
                }
                else {
                    serverId = showServerRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling showServer.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询云服务器是否配置了自动恢复动作。
         */
        showServerAutoRecovery: function (showServerAutoRecoveryRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}/autorecovery",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (showServerAutoRecoveryRequest !== null && showServerAutoRecoveryRequest !== undefined) {
                if (showServerAutoRecoveryRequest instanceof ShowServerAutoRecoveryRequest_1.ShowServerAutoRecoveryRequest) {
                    serverId = showServerAutoRecoveryRequest.serverId;
                }
                else {
                    serverId = showServerAutoRecoveryRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling showServerAutoRecovery.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询弹性云服务器挂载的单个磁盘信息。
         */
        showServerBlockDevice: function (showServerBlockDeviceRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}/block_device/{volume_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            var volumeId;
            if (showServerBlockDeviceRequest !== null && showServerBlockDeviceRequest !== undefined) {
                if (showServerBlockDeviceRequest instanceof ShowServerBlockDeviceRequest_1.ShowServerBlockDeviceRequest) {
                    serverId = showServerBlockDeviceRequest.serverId;
                    volumeId = showServerBlockDeviceRequest.volumeId;
                }
                else {
                    serverId = showServerBlockDeviceRequest['server_id'];
                    volumeId = showServerBlockDeviceRequest['volume_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling showServerBlockDevice.');
            }
            if (volumeId === null || volumeId === undefined) {
                throw new RequiredError('volumeId', 'Required parameter volumeId was null or undefined when calling showServerBlockDevice.');
            }
            options.pathParams = { 'server_id': serverId, 'volume_id': volumeId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询弹性云服务器组详情。  与原生的创建云服务器组接口不同之处在于该接口支持企业项目细粒度权限的校验。
         */
        showServerGroup: function (showServerGroupRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/os-server-groups/{server_group_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverGroupId;
            if (showServerGroupRequest !== null && showServerGroupRequest !== undefined) {
                if (showServerGroupRequest instanceof ShowServerGroupRequest_1.ShowServerGroupRequest) {
                    serverGroupId = showServerGroupRequest.serverGroupId;
                }
                else {
                    serverGroupId = showServerGroupRequest['server_group_id'];
                }
            }
            if (serverGroupId === null || serverGroupId === undefined) {
                throw new RequiredError('serverGroupId', 'Required parameter serverGroupId was null or undefined when calling showServerGroup.');
            }
            options.pathParams = { 'server_group_id': serverGroupId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询租户配额信息。
         */
        showServerLimits: function () {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/limits",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 当通过支持Cloudbase-init功能的镜像创建Windows云服务器时，获取云服务器初始安装时系统生成的管理员帐户（Administrator帐户或Cloudbase-init设置的帐户）随机密码。
         */
        showServerPassword: function (showServerPasswordRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}/os-server-password",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (showServerPasswordRequest !== null && showServerPasswordRequest !== undefined) {
                if (showServerPasswordRequest instanceof ShowServerPasswordRequest_1.ShowServerPasswordRequest) {
                    serverId = showServerPasswordRequest.serverId;
                }
                else {
                    serverId = showServerPasswordRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling showServerPassword.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 获取弹性云服务器VNC远程登录地址。
         */
        showServerRemoteConsole: function (showServerRemoteConsoleRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/remote_console",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (showServerRemoteConsoleRequest !== null && showServerRemoteConsoleRequest !== undefined) {
                if (showServerRemoteConsoleRequest instanceof ShowServerRemoteConsoleRequest_1.ShowServerRemoteConsoleRequest) {
                    serverId = showServerRemoteConsoleRequest.serverId;
                    body = showServerRemoteConsoleRequest.body;
                }
                else {
                    serverId = showServerRemoteConsoleRequest['server_id'];
                    body = showServerRemoteConsoleRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling showServerRemoteConsole.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * - 查询指定云服务器的标签信息。  - 标签管理服务TMS使用该接口查询指定云服务器的全部标签数据。
         */
        showServerTags: function (showServerTagsRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/cloudservers/{server_id}/tags",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var serverId;
            if (showServerTagsRequest !== null && showServerTagsRequest !== undefined) {
                if (showServerTagsRequest instanceof ShowServerTagsRequest_1.ShowServerTagsRequest) {
                    serverId = showServerTagsRequest.serverId;
                }
                else {
                    serverId = showServerTagsRequest['server_id'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling showServerTags.');
            }
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 修改云服务器信息，目前支持修改云服务器名称及描述和hostname。
         */
        updateServer: function (updateServerRequest) {
            var options = {
                method: "PUT",
                url: "/v1/{project_id}/cloudservers/{server_id}",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (updateServerRequest !== null && updateServerRequest !== undefined) {
                if (updateServerRequest instanceof UpdateServerRequest_1.UpdateServerRequest) {
                    serverId = updateServerRequest.serverId;
                    body = updateServerRequest.body;
                }
                else {
                    serverId = updateServerRequest['server_id'];
                    body = updateServerRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling updateServer.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 修改按需服务器，设置定时销毁时间。如果设置的销毁时间为空，表示取消销毁时间。  该接口支持企业项目细粒度权限的校验，具体细粒度请参见 ecs:cloudServers:put。
         */
        updateServerAutoTerminateTime: function (updateServerAutoTerminateTimeRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/actions/update-auto-terminate-time",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (updateServerAutoTerminateTimeRequest !== null && updateServerAutoTerminateTimeRequest !== undefined) {
                if (updateServerAutoTerminateTimeRequest instanceof UpdateServerAutoTerminateTimeRequest_1.UpdateServerAutoTerminateTimeRequest) {
                    serverId = updateServerAutoTerminateTimeRequest.serverId;
                    body = updateServerAutoTerminateTimeRequest.body;
                }
                else {
                    serverId = updateServerAutoTerminateTimeRequest['server_id'];
                    body = updateServerAutoTerminateTimeRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling updateServerAutoTerminateTime.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 更新云服务器元数据。  - 如果元数据中没有待更新字段，则自动添加该字段。  - 如果元数据中已存在待更新字段，则直接更新字段值。  - 如果元数据中的字段不再请求参数中，则保持不变
         */
        updateServerMetadata: function (updateServerMetadataRequest) {
            var options = {
                method: "POST",
                url: "/v1/{project_id}/cloudservers/{server_id}/metadata",
                contentType: "application/json;charset=UTF-8",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var body;
            var serverId;
            if (updateServerMetadataRequest !== null && updateServerMetadataRequest !== undefined) {
                if (updateServerMetadataRequest instanceof UpdateServerMetadataRequest_1.UpdateServerMetadataRequest) {
                    serverId = updateServerMetadataRequest.serverId;
                    body = updateServerMetadataRequest.body;
                }
                else {
                    serverId = updateServerMetadataRequest['server_id'];
                    body = updateServerMetadataRequest['body'];
                }
            }
            if (serverId === null || serverId === undefined) {
                throw new RequiredError('serverId', 'Required parameter serverId was null or undefined when calling updateServerMetadata.');
            }
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling body.');
            }
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';
            options.data = body !== undefined ? body : {};
            options.pathParams = { 'server_id': serverId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
        /**
         * 查询Job的执行状态。  对于创建云服务器、删除云服务器、云服务器批量操作和网卡操作等异步API，命令下发后，会返回job_id，通过job_id可以查询任务的执行状态。
         */
        showJob: function (showJobRequest) {
            var options = {
                method: "GET",
                url: "/v1/{project_id}/jobs/{job_id}",
                contentType: "application/json",
                queryParams: {},
                pathParams: {},
                headers: {},
                data: {}
            };
            var localVarHeaderParameter = {};
            var jobId;
            if (showJobRequest !== null && showJobRequest !== undefined) {
                if (showJobRequest instanceof ShowJobRequest_1.ShowJobRequest) {
                    jobId = showJobRequest.jobId;
                }
                else {
                    jobId = showJobRequest['job_id'];
                }
            }
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId', 'Required parameter jobId was null or undefined when calling showJob.');
            }
            options.pathParams = { 'job_id': jobId, };
            options.headers = localVarHeaderParameter;
            return options;
        },
    };
};
exports.ParamCreater = ParamCreater;
function newClient(client) {
    return new EcsClient(client);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        _this.name = "RequiredError";
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
